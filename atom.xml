<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tdmaker.github.io/faded/</id>
    <title>Typhoeus</title>
    <updated>2020-04-08T08:28:57.378Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tdmaker.github.io/faded/"/>
    <link rel="self" href="https://tdmaker.github.io/faded/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tdmaker.github.io/faded/images/avatar.png</logo>
    <icon>https://tdmaker.github.io/faded/favicon.ico</icon>
    <rights>All rights reserved 2020, Typhoeus</rights>
    <entry>
        <title type="html"><![CDATA[区块链——商用调查]]></title>
        <id>https://tdmaker.github.io/faded/post/blockchain-commercial-survey/</id>
        <link href="https://tdmaker.github.io/faded/post/blockchain-commercial-survey/">
        </link>
        <updated>2020-04-08T07:36:36.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1082599">区块链商用调查</a></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1082599">区块链商用调查</a></p>
</blockquote>
<!-- more -->
<h1 id="1-信息共享信息对齐-提高效率">1 信息共享——信息对齐、提高效率</h1>
<p>这应该是区块链最简单的应用场景，就是信息互通有无。</p>
<h2 id="11-传统的信息共享的痛点">1.1 传统的信息共享的痛点</h2>
<ol>
<li>要么是统一由一个中心进行信息发布和分发，要么是彼此之间定时批量对账（典型的每天一次），对于有时效性要求的信息共享，难以达到实时共享。</li>
<li>信息共享的双方缺少一种相互信任的通信方式，难以确定收到的信息是否是对方发送的。</li>
</ol>
<h2 id="12-区块链-信息共享">1.2 区块链 + 信息共享</h2>
<p>首先，区块链本身就是需要保持各个节点的数据一致性的，可以说是自带信息共享功能；其次，实时的问题通过区块链的 P2P 技术可以实现；最后，利用区块链的不可篡改和共识机制，可构建其一条安全可靠的信息共享通道。<br>
也行你会有这样的疑问：解决上面的问题，不用区块链技术，我自己建个加密通道也可以搞定啊！但我想说，既然区块链技术能够解决这些问题，并且增加节点非常方便，在你没有已经建好一套安全可靠的信息共享系统之前，为什么不用区块链技术呢？</p>
<h1 id="2-版权保护不可篡改-永久保存">2 版权保护——不可篡改、永久保存</h1>
<h2 id="21-传统鉴证证明的痛点">2.1 传统鉴证证明的痛点</h2>
<ol>
<li>流程复杂：以版权保护为例，现有鉴证证明方式，登记时间长，且费用高。</li>
<li>公信力不足：以法务存证为例，个人或中心化的机构存在篡改数据的可能，公信力难以得到保证。</li>
</ol>
<h2 id="22-区块链-鉴证证明">2.2 区块链 + 鉴证证明</h2>
<ol>
<li>流程简化：区块链应用到鉴证证明后，无论是登记还是查询都非常方便，无需再奔走于各个部门之间，</li>
<li>安全可靠：区块链的去中心化存储，保证没有一家机构可以任意篡改数据，</li>
</ol>
<h2 id="23-应用案例">2.3 应用案例</h2>
<p>区块链在鉴权证明领域的应用有版权保护、法务存证等，下面以版权保护为例，简单说下如何区块链如何实现版权登记和查询。</p>
<ol>
<li>电子身份证：将“申请人+发布时间+发布内容”等版权信息加密后上传，版权信息用于唯一区块链 ID，相当拥有了一张电子身份证。</li>
<li>时间戳保护：版权信息存储时，是加上时间戳信息的，如右雷同，可用于证明先后。</li>
<li>可靠性保证：区块链的去中心化存储、私钥签名、不可篡改的特性提升了鉴权信息的可靠性。</li>
</ol>
<p>2016 年 8 月，由 Onchain、微软（中国）、法大大等多个机构在北京成立了电子存证区块链联盟“法链”。</p>
<p>2017 年 12 月，微众银行、仲裁委（广州仲裁委）、杭州亦笔科技有限公司共同推出的仲裁联盟链，用于司法场景下的存证；2018 年 3 月，广州首个“仲裁链”判决书出炉。</p>
<h1 id="3-物流链溯源防伪">3 物流链——溯源防伪</h1>
<p><img src="https://tdmaker.github.io/faded//post-images/1586332032829.png" alt="" loading="lazy"><br>
商品从生产商到消费者手中，需要经历多个环节（流程可能如上图所示），跨境购物则更加复杂；中间环节经常出问题，消费者很容易购买的假货。而假货问题正是困扰着各大商家和平台，至今无解。</p>
<h2 id="31-传统是防伪溯源手段">3.1 传统是防伪溯源手段</h2>
<p>以一直受假冒伪劣产品困扰的茅台酒的防伪技术为例，2000 年起，其酒盖里有一个唯一的 RFID 标签，可通过手机等设备以 NFC 方式读出，然后通过茅台的 APP 进行校验，以此防止伪造产品。<br>
咋一看，这种防伪效果非常可靠。但 2016 年还是引爆了茅台酒防伪造假，虽然通过 NFC 方式验证 OK，但经茅台专业人士鉴定为假酒。后来，在“国酒茅台防伪溯源系统”数据库审计中发现 80 万条假的防伪标签记录，系防伪技术公司人员参与伪造；随后，茅台改用安全芯片防伪标签。</p>
<p>但这里暴露出来的痛点并没有解决，即防伪信息掌握在某个中心机构中，有权限的人可以任意修改。(备注：茅台的这种防伪方式，也衍生了旧瓶回收，旧瓶装假酒的产业，防伪道路任重而道远)。</p>
<p>2017 年 05 月贵阳数博会上，小马哥就建议茅台防伪使用区块链；那么区块链和物流链的结合有什么优势呢？</p>
<h2 id="32-区块链物流链">3.2 区块链+物流链</h2>
<ol>
<li>区块链没有中心化节点，各节点是平等的，掌握单个节点无法实现修改数据；需要掌控足够多的节点，才可能伪造数据，大大提高伪造数据的成本。</li>
<li>区块链天生的开放、透明，使得任何人都可以公开查询，伪造数据被发现的概率大增。</li>
<li>区块链的数据不可篡改性，也保证了已销售出去的产品信息已永久记录，无法通过简单复制防伪信息蒙混过关，实现二次销售。</li>
<li>物流链的所有节点上区块链后，商品从生产商到消费者手里都有迹可循，形成完整链条；商品缺失的环节越多，将暴露出其是伪劣产品概率更大。</li>
</ol>
<p>##3.3 应用案例<br>
目前，入局物流链的玩家较多，包括腾讯、阿里、京东、沃尔玛等。</p>
<p>据说，阿里的菜鸟在海淘进口应用区块链上，走在了前面，已经初步实现海外商品溯源，国际物流及进口申报溯源、境内物流溯源；下一步就是生产企业溯源了。下图是网上流传的关于阿里的菜鸟在海淘场景运用区块链的示意图。<br>
<img src="https://tdmaker.github.io/faded//post-images/1586332241430.jpg" alt="" loading="lazy"></p>
<h1 id="4-供应链金融解决中小微企业融资难">4 供应链金融——解决中小微企业融资难</h1>
<h2 id="41-传统的供应链单点融资">4.1 传统的供应链单点融资</h2>
<p>在一般供应链贸易中，从原材料的采购、加工、组装到销售的各企业间都涉及到资金的支出和收入，而企业的资金支出和收入是有时间差的，这就形成了资金缺口，多数需要进行融资生产。我们先来看个简单的供应链，如下图：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586332350132.png" alt="" loading="lazy"><br>
我们再来看看图中各个角色的融资情况：</p>
<ol>
<li>核心企业或大企业：规模大、信用好，议价能力强，通过先拿货后付款，延长账期将资金压力传导给后续供应商；此外，其融资能力也是最强的。</li>
<li>一级供应商：通过核心企业的债权转让，可以获得银行的融资。</li>
<li>其他供应商（多数是中小微企业）：规模小、发展不稳定、信用低，风险高，难以获得银行的贷款；也无法想核心企业一样有很长的账期；一般越小的企业其账期越短，微小企业还需要现金拿货。这样一出一入对比就像是：中小微企业无息借钱给大企业做生意。</li>
</ol>
<h2 id="42-区块链-供应链金融">4.2 区块链 + 供应链金融</h2>
<p>面对，上述供应链里的中小微企业融资难问题，主要原因是银行和中小企业之间缺乏一个有效的信任机制。</p>
<p>假如供应链所有节点上链后，通过区块链的私钥签名技术，保证了核心企业等的数据可靠性；而合同、票据等上链，是对资产的数字化，便于流通，实现了价值传递。<br>
<img src="https://tdmaker.github.io/faded//post-images/1586332493469.png" alt="" loading="lazy"><br>
如上图所示，在区块链解决了数据可靠性和价值流通后，银行等金融机构面对中小企业的融资，不再是对这个企业进行单独评估；而是站在整个供应链的顶端，通过信任核心企业的付款意愿，对链条上的票据、合同等交易信息进行全方位分析和评估。即借助核心企业的信用实力以及可靠的交易链条，为中小微企业融资背书，实现从单环节融资到全链条融资的跨越，从而缓解中小微企业融资难问题。</p>
<h1 id="5-跨境支付提高效率-降低费用">5 跨境支付——提高效率、降低费用</h1>
<h2 id="51-传统跨境支付">5.1 传统跨境支付</h2>
<p><img src="https://tdmaker.github.io/faded//post-images/1586332579435.png" alt="" loading="lazy"><br>
跨境支付涉及多种币种，存在汇率问题，传统跨境支付非常依赖于第三方机构，大致的简化模型如上图所示，存在着两个问题；</p>
<ol>
<li>流程繁琐，结算周期长：传统跨境支付基本都是非实时的，银行日终进行交易的批量处理，通常一笔交易需要 24 小时以上才能完成；某些银行的跨境支付看起来是实时的，但实际上，是收款银行基于汇款银行的信用做了一定额度的垫付，在日终再进行资金清算和对账，业务处理速度慢。</li>
<li>手续费高：传统跨境支付模式存在大量人工对账操作，加之依赖第三方机构，导致手续费居高不下，麦肯锡《2016 全球支付》报告数据显示，通过代理行模式完成一笔跨境支付的平均成本在 25 美元到 35 美元之间。</li>
</ol>
<h2 id="52-区块链-跨境支付">5.2 区块链 + 跨境支付</h2>
<p>这些问题的存在，很大原因还是信息不对称，没有建立有效的信任机制。<br>
<img src="https://tdmaker.github.io/faded//post-images/1586332873742.png" alt="" loading="lazy"><br>
如上图所示，区块链的引入，解决了跨境支付信息不对称的问题，并建立起一定程度的信任机制；带来了两个好处。</p>
<ol>
<li>效率提高，费用降低：接入区块链技术后，通过公私钥技术，保证数据的可靠性，再通过加密技术和去中心，达到数据不可篡改的目的，最后，通过 P2P 技术，实现点对点的结算；去除了传统中心转发，提高了效率，降低了成本(也展望了普及跨境小额支付的可能性)。</li>
<li>可追溯，符合监管需求：传统的点对点结算不能不规模应用，除了信任问题，还有就是存在监管漏洞（点对点私下交易，存在洗黑钱的风险），而区块链的交易透明，信息公开，交易记录永久保存实现了可追溯，符合监管的需求。</li>
</ol>
<h1 id="6-资产数字化便于资产流通">6 资产数字化——便于资产流通</h1>
<h2 id="61-实体资产存在的问题">6.1 实体资产存在的问题</h2>
<ol>
<li>实体资产往往难以分割，不便于流通</li>
<li>实体资产的流通难以监控，存在洗黑钱等风险</li>
</ol>
<h2 id="62-区块链实现资产数字化">6.2 区块链实现资产数字化</h2>
<ol>
<li>资产数字化后，易于分割、流通方便，交易成本低</li>
<li>用区块链技术实现资产数字化后，所有资产交易记录公开、透明、永久存储、可追溯，完全符合监管需求</li>
</ol>
<h2 id="63-应用案例">6.3 应用案例</h2>
<p>还是以腾讯的微黄金应用为例，继续借用腾讯区块链官网（trustsql.qq.com）上的图片，可以看到，在资产数字化之后，流通更为方便了，不再依赖于发行机构；且购买 0.001g 黄金成为了可能，降低了参与门槛。<br>
<img src="https://tdmaker.github.io/faded//post-images/1586333034775.png" alt="" loading="lazy"></p>
<h1 id="7-代币去中介-去信任">7 代币——去中介、去信任</h1>
<p>本来不像把代币加进来的，但说到区块链，始终绕不开代币；因区块链脱胎于比特币，天生具有代币的属性，目前区块链最成功的应用也正是比特币。</p>
<h2 id="71-传统货币存在的问题">7.1 传统货币存在的问题</h2>
<ol>
<li>传统的货币发行权掌握在国家手中，存在着货币滥发的风险
<ul>
<li>货币滥发案例 1：元朝自 1271 年建立后，依然四处征战，消耗大量的钱财和粮食，为了财政问题，长期滥发货币，造成严重通货膨胀，多数百姓生活在水生火热中，导致流民四起，国家大乱，1368 年，不可一世的元朝成了只有 97 年短命鬼，走向了灭亡。</li>
<li>货币滥发案例 2：1980 年津巴布韦独立，后因土改失败，经济崩溃，政府入不敷出，开始印钞；2001 年时 100 津巴布韦币可兑换约 1 美元；2009 年 1 月，津央行发行 100 万亿面值新津元（如下图）加速货币崩溃，最终津元被废弃，改用“美元化”货币政策。2017 年津巴布韦发生政变，总统穆加贝被赶下台。</li>
</ul>
</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://tdmaker.github.io/faded//post-images/1586333225353.png" alt="" loading="lazy"></figure>
<ol start="2">
<li>传统的记账权掌握在一个中心化的中介机构手中，存在中介系统瘫痪、中介违约、中介欺瞒、甚至是中介耍赖等风险。<br>
2013 年 3 月，塞浦路斯为获得救助，对银行储户进行一次性征税约 58 亿欧元, 向不低于 10 万欧元的存款一次性征税 9.9%，向低于 10 万欧元的一次性征税 6.75%。<br>
2017 年 4 月，民生银行 30 亿假理财事件暴露，系一支行行长伪造保本保息理财产品所致，超过 150 名投资者被套。</li>
</ol>
<h2 id="72-区块链如何解决这些问题">7.2 区块链如何解决这些问题</h2>
<p><img src="https://tdmaker.github.io/faded//post-images/1586334038696.png" alt="" loading="lazy"><br>
比特币解决了货币在发行和记账环节的信任问题，我们来看下比特币是如何一一破解上面的两个问题。</p>
<h3 id="721-滥发问题">7.2.1 滥发问题</h3>
<p>比特币的获取只能通过挖矿获得，且比特币总量为 2100 万个，在发行环节解决了货币滥发的问题；</p>
<h3 id="722-账本修改问题">7.2.2 账本修改问题</h3>
<p>比特币的交易记录通过链式存储和去中心化的全球节点构成网络来解决账本修改问题。</p>
<h3 id="723-链式存储">7.2.3 链式存储</h3>
<p>可以简单理解为：存储记录的块是一块连着一块的，形成一个链条；除第一个块的所有区块都的记录包含了前一区块的校验信息，改变任一区块的信息，都将导致后续区块校验出错。因为这种关联性，中间也无法插入其他块，所以修改已有记录是困难的。</p>
<h3 id="724-去中心化节点">7.2.4 去中心化节点</h3>
<p>可以简单理解为：全球的中心节点都是平等的，都拥有一模一样的账本，所以，任一节点出问题都不影响账本记录。而要修改账本，必须修改超过全球一半的节点才能完成；而这在目前看来几乎不可能。</p>
<p>既然账本无法修改，那要是记账的时候作弊呢？</p>
<p>首先，比特币的每条交易记录是有私钥签名的，别人伪造不了这个记录。你能修改的仅仅自己发起的交易记录。</p>
<p>其次，是关于记账权问题：比特币的记账权，通过工作量证明获得，可以简单理解为：通过算法确定同一时刻，全球只有一个节点获得了记账权，基本规律是谁拥有的计算资源越多，谁获得记账权的概率越大，只有超过全网一半的算力，才可能实现双花。</p>
<h3 id="725-备注">7.2.5 备注</h3>
<p>比特币的模式是不可复制的，比特币已经吸引了全球绝大多数的算力，从而降低 51% 攻击发生等问题；其他的复制品基本无法获得相应的算力保证。</p>
<p>目前，比特币还存在着 51% 和效率低等问题有待解决，另外，关于交易本身的信任问题是个社会问题，比特币是没有解决的，也解决不了的。</p>
<h2 id="73-应用案例">7.3 应用案例</h2>
<p>最具代表性的当然是比特币，也不用多说了。</p>
<p>备注：代币这块真的不看好，比特币目前吸引了全球绝大部分的算力，有独一无二的算力资源作为支撑还稍好一点，其他的代币和传统的货币相比，其背后缺乏国家和武力为其做信用背书，且夺取了国家发币带来的各种好处（如宏观调控），仔细想想就知道有多不靠谱。</p>
<h1 id="8-小结">8 小结</h1>
<p>区块链应用的场景肯定还有很多，但很多都还不大明朗，暂时就先梳理以上7种场景，顺便归纳一下。<br>
<img src="https://tdmaker.github.io/faded//post-images/1586334430353.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[区块链——六大核心算法]]></title>
        <id>https://tdmaker.github.io/faded/post/blockchain-core-algorithms/</id>
        <link href="https://tdmaker.github.io/faded/post/blockchain-core-algorithms/">
        </link>
        <updated>2020-04-08T03:37:59.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODc2Mzk2MA==&amp;mid=2451745390&amp;idx=1&amp;sn=49cfe1109265da6cbc66e2a78e61857e&amp;chksm=b113c6b986644fafcc2a50cac866e0bc2348294218698769cb4bacc25121326efdeb1712e023&amp;mpshare=1&amp;scene=23&amp;srcid=0530alUeRaZnqCIi8dj1jEm5#rd">区块链技术六大核心算法</a></p>
</blockquote>
<h1 id="拜占庭协定">拜占庭协定</h1>
<p>拜占庭的故事大概是这么说的：拜占庭帝国拥有巨大的财富，周围 10 个邻邦垂诞已久，但拜占庭高墙耸立，固若金汤，没有一个单独的邻邦能够成功入侵。任何单个邻邦入侵的都会失败，同时也有可能自身被其他 9 个邻邦入侵。拜占庭帝国防御能力如此之强，至少要有十个邻邦中的一半以上同时进攻，才有可能攻破。然而，如果其中的一个或者几个邻邦本身答应好一起进攻，但实际过程出现背叛，那么入侵者可能都会被歼灭。于是每一方都小心行事，不敢轻易相信邻国。这就是拜占庭将军问题。</p>
<p>在这个分布式网络里：每个将军都有一份实时与其他将军同步的消息账本。账本里有每个将军的签名都是可以验证身份的。如果有哪些消息不一致，可以知道消息不一致的是哪些将军。尽管有消息不一致的，只要超过半数同意进攻，少数服从多数，共识达成。</p>
<p>由此，在一个分布式的系统中，尽管有坏人，坏人可以做任意事情（不受protocol限制），比如不响应、发送错误信息、对不同节点发送不同决定、不同错误节点联合起来干坏事等等。但是，只要大多数人是好人，就完全有可能去中心化地实现共识。</p>
<h1 id="非对称加密技术">非对称加密技术</h1>
<p>在上述拜占庭协定中，如果 10 个将军中的几个同时发起消息，势必会造成系统的混乱，造成各说各的攻击时间方案，行动难以一致。谁都可以发起进攻的信息，但由谁来发出呢？其实这只要加入一个成本就可以了，即：一段时间内只有一个节点可以传播信息。当某个节点发出统一进攻的消息后，各个节点收到发起者的消息必须签名盖章，确认各自的身份。</p>
<p>在如今看来，非对称加密技术完全可以解决这个签名问题。非对称加密算法的加密和解密使用不同的两个密钥.这两个密钥就是我们经常听到的“公钥”和“私钥”。公钥和私钥一般成对出现, 如果消息使用公钥加密,那么需要该公钥对应的私钥才能解密; 同样，如果消息使用私钥加密,那么需要该私钥对应的公钥才能解密。</p>
<h1 id="容错问题">容错问题</h1>
<p>我们假设在此网络中，消息可能会丢失、损坏、延迟、重复发送，并且接受的顺序与发送的顺序不一致。此外，节点的行为可以是任意的：可以随时加入、退出网络，可以丢弃消息、伪造消息、停止工作等，还可能发生各种人为或非人为的故障。我们的算法对由共识节点组成的共识系统，提供的容错能力，这种容错能力同时包含安全性和可用性，并适用于任何网络环境。</p>
<h1 id="paxos-算法一致性算法">Paxos 算法（一致性算法）</h1>
<p>Paxos算法解决的问题是一个分布式系统如何就某个值（决议）达成一致。一个典型的场景是，在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，那么他们最后能得到一个一致的状态。为保证每个节点执行相同的命令序列，需要在每一条指令上执行一个“一致性算法”以保证每个节点看到的指令一致。一个通用的一致性算法可以应用在许多场景中，是分布式计算中的重要问题。 节点通信存在两种模型：共享内存和消息传递。Paxos 算法就是一种基于消息传递模型的一致性算法。</p>
<h1 id="共识机制">共识机制</h1>
<p>区块链共识算法主要是工作量证明和权益证明。拿比特币来说，其实从技术角度来看可以把 PoW 看做重复使用的 Hashcash，生成工作量证明在概率上来说是一个随机的过程。开采新的机密货币，生成区块时，必须得到所有参与者的同意，那矿工必须得到区块中所有数据的 PoW 工作证明。与此同时矿工还要时时观察调整这项工作的难度，因为对网络要求是平均每 10 分钟生成一个区块。</p>
<h1 id="分布式存储">分布式存储</h1>
<p>分布式存储是一种数据存储技术，通过网络使用每台机器上的磁盘空间，并将这些分散的存储资源构成一个虚拟的存储设备，数据分散的存储在网络中的各个角落。所以，分布式存储技术并不是每台电脑都存放完整的数据，而是把数据切割后存放在不同的电脑里。就像存放 100 个鸡蛋，不是放在同一个篮子里，而是分开放在不同的地方，加起来的总和是 100 个。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[区块链——入门]]></title>
        <id>https://tdmaker.github.io/faded/post/blockchain-introduction/</id>
        <link href="https://tdmaker.github.io/faded/post/blockchain-introduction/">
        </link>
        <updated>2020-04-08T02:56:09.000Z</updated>
        <content type="html"><![CDATA[<p>狭义来讲，区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构， 并以密码学方式保证的不可篡改和不可伪造的分布式账本。广义来讲，区块链技术是利用块链式数据结构来验证与存储数据、利用分布式节点共识算法来生成和更新数据、利用密码学的方式保证数据传输和访问的安全、利用由自动化脚本代码组成的智能合约来编程和操作数据的一种全新的分布式基础架构与计算范式。</p>
<h1 id="1-涉及到的技术">1 涉及到的技术</h1>
<ul>
<li>密码学</li>
<li>分布式一致性协议</li>
<li>点对点网络通信技术</li>
<li>智能合约编程语言等。</li>
</ul>
<h1 id="2-区块链的分类">2 区块链的分类</h1>
<p>区块链严格定义上被划分为 3 种类型：公有链，私有链、和联盟链，但是在实际应用中单一的某种链常常无法满足用户需求，就出现了多种类型的结合，比如私有链 + 联盟链、联盟链 + 公有链等不同组合形式，最后产生了侧链和互联链。掌握了这 5 种区块链类型的各自特点，是理解和设计区块链网络系统架构的基础和核心，其重要性不言而喻。</p>
<h2 id="21-公有链public-blockchains">2.1 公有链（Public blockchains）</h2>
<p>公有链是对所有人公开，用户不需要注册和授权就能够匿名访问网络和区块，任何人都可以自由加入和退出网络，并参与记账和交易。</p>
<p>公有链是真正完全意义上的去中心化区块链，它通过密码学（非对称加密）算法保证了交易的安全性和不可篡改性，在陌生的网络（非安全）环境中，建立了互信和共识机制。在公有链中共识机制一般是工作量证明（POW）和权益证明（POS）。</p>
<p>公有链因为人人可参与，无需授权的特点又被称为非许可链，即不需要验证身份即可参与一切网络活动。目前比特币、以太坊、超级账本、大多数山寨币以及智能合约都是建立在公有链上，其中公有链的始祖是比特币区块链。</p>
<p>公有链适用于数字货币、电子商务、互联网金融、知识产权等应用场景。</p>
<h2 id="22-联盟链consortium-blockchains">2.2 联盟链（Consortium blockchains）</h2>
<p>联盟链仅限于联盟成员，因其只针对成员开放全部或部分功能，所以联盟链上的读写权限、以及记账规则都按联盟规则来“私人定制”。联盟链上的共识过程由预先选好的节点控制，一般来说，他适用于机构间的交易、结算、或清算等 B2B 场景。比如人民银行开发一个基于联盟链的结算、清算系统，工建中农等银行作为联盟成员加入这个系统，获得相应的授权，就可以实时进行不同银行之间的实时结算、清算，与现有的中心化系统相比，这样不仅大大提升了结算、清算效率，几乎不需要人工参与，还能大大降低结算、清算成本。联盟链几乎不采用工作量证明共识机制而是采用权益证明或PBTF等共识算法。</p>
<p>联盟链由参与成员机构共同维护，并提供了对参与成员的管理、认证、授权、监控、审计等全套安全管理功能。2015 年成立的 R3 联盟，就是银行业的一个联盟链，目前已加入的成员多达 40 多个，包括世界著名的银行摩根大通、汇丰、高盛等。</p>
<p>联盟链适用于行业协会、高级别机构组织、大型连锁企业对下属单位和分管机构的交易和监管。</p>
<h2 id="23-私有链private-blockchain">2.3 私有链（Private blockchain）</h2>
<p>私有链对单独的个人或实体开放，仅在私有组织，比如公司内部使用，私有链上的读写权限，参与记账的权限都由私有组织来制定。比如企业内部的办公审批、财务审计；政府行业的预算和执行。私有链的主要价值在于提供安全、可塑源，不可篡改，自动执行，这是传统系统很难同时做到的。</p>
<p>因为私有链加入结点少，所以交易速度快。私有链的交易速度可以比任何其他的区块链都快，甚至接近了并不是一个区块链的常规数据库的速度。而且因为就算少量的节点，也都具有很高的信任度，所以并不需要每个节点来验证一个交易(无需挖矿)。</p>
<p>由于私有链和联盟链都需要授权加入和访问，私有链和联盟链也被称作许可链。</p>
<p>私有链适用于企业、组织内部。</p>
<h2 id="24-侧链side-chains">2.4 侧链（Side Chains）</h2>
<p>严格来说侧链不是区块链的一种类型，它只是在现实应用中，开发者对区块链的一种延伸（扩展），而特别取了个绰号。目前，市场上公开的虚拟货币系统，绝大多数都是基于比特币系统进行规则修改或扩展而来，因为比特币的设计规则已十分固定，难以做出较大修改和扩展，于是这些代币系统的开发者门干脆以比特币平台为基础，重构出一条区块链，然后使用新的规则，发布新的虚拟货币，这条重构出来的区块链就被称为侧链。普遍认为能和比特币区块链进行交互，并能与比特币挂钩的区块链就是侧链。</p>
<p>侧链目前主要适用于代币发行。</p>
<h2 id="25-互联链intechains">2.5 互联链（InteChains）</h2>
<p>互联链就是各种不同的区块链之间的互联互通所形成的一个更大的生态区块链。比如电商平台公有链 + 物流公有链 + 物流联盟链 + 银行联盟链 +.....，它们之间的相互协作、通讯、共识、就是一个典型的互联链。</p>
<h1 id="3-区块链的工作量证明机制">3 区块链的工作量证明机制</h1>
<h2 id="31-powproof-of-power-工作量证明机制">3.1 POW：proof of power, 工作量证明机制</h2>
<p>PoW（工作量证明），也就是像比特币的挖矿机制，矿工通过把网络尚未记录的现有交易打包到一个区块，然后不断遍历尝试来寻找一个随机数，使得新区块加上随机数的哈希值满足一定的难度条件，例如前面 10 位是零。找到满足条件的随机数，就相当于确定了区块链最新的一个区块，也相当于获得了区块链的本轮记账权。矿工把满足挖矿难度条件的区块在网络中广播出去，全网其他节点在验证该区块满足挖矿难度条件，同时区块里的交易数据符合协议规范后，将各自把该区块链接到自己版本的区块链上，从而在全网形成对当前网络状态的共识。</p>
<ul>
<li>优点：完全去中心化，节点自由进出，避免了建立和维护中心化信用机构的成本。只要网络破坏者的算力不超过网络总算力的 50%，网络的交易状态就能达成一致。</li>
<li>缺点：目前比特币挖矿造成大量的资源浪费；另外挖矿的激励机制也造成矿池算力的高度集中，背离了当初去中心化设计的初衷。更大的问题是 PoW 机制的共识达成的周期较长，每秒只能最多做 7 笔交易，不适合商业应用。</li>
</ul>
<h2 id="32-posproof-of-stake-股权证明">3.2 POS：proof of stake, 股权证明</h2>
<p>PoS 权益证明，要求节点提供拥有一定数量的代币证明来获取竞争区块链记账权的一种分布式共识机制。如果单纯依靠代币余额来决定记账者必然使得富有者胜出，导致记账权的中心化，降低共识的公正性，因此不同的 PoS 机制在权益证明的基础上，采用不同方式来增加记账权的随机性来避免中心化。例如点点币（PeerCoin）PoS 机制中，拥有最多链龄长的比特币获得记账权的几率就越大。NXT 和 Blackcoin 则采用一个公式来预测下一个记账的节点。拥有多的代币被选为记账节点的概率就会大。未来以太坊也会从目前的 PoW 机制转换到 PoS 机制，从目前看到的资料看，以太坊的 PoS 机制将采用节点下赌注来赌下一个区块，赌中者有额外以太币奖，赌不中者会被扣以太币的方式来达成下一区块的共识。</p>
<ul>
<li>优点：在一定程度上缩短了共识达成的时间，降低了 PoW 机制的资源浪费。</li>
<li>缺点：破坏者对网络攻击的成本低，网络的安全性有待验证。另外拥有代币数量大的节点获得记账权的几率更大，会使得网络的共识受少数富裕账户支配，从而失去公正性。</li>
</ul>
<h2 id="33-dposdelegated-proof-of-stake-共识机制委托权以证明">3.3 DPOS：delegated proof of stake, 共识机制，委托权以证明</h2>
<p>DPoS（股份授权证明）机制，类似于董事会投票。比特股（bitshares）采用的 PoS 机制是持股者投票选出一定数量的见证人，每个见证人按序有两秒的权限时间生成区块，若见证人在给定的时间片不能生成区块，区块生成权限交给下一个时间片对应的见证人。持股人可以随时通过投票更换这些见证人。DPoS 的这种设计使得区块的生成更为快速，也更加节能。</p>
<ul>
<li>优点：大幅缩小参与验证和记账节点的数量，可以达到秒级的共识验证。</li>
<li>缺点：选举固定数量的见证人作为记账候选人有可能不适合于完全去中心化的场景。另外在网络节点数少的场景，选举的见证人的代表性也不强。</li>
</ul>
<h1 id="4-分布式一致性算法">4 分布式一致性算法</h1>
<p>分布式一致性算法是基于传统的分布式一致性技术。其中有分为解决拜占庭将军问题的拜占庭容错算法，如 PBFT。另外解决非拜占庭问题的分布式一致性算法（Pasox、Raft）。该类算法目前是联盟链和私有链场景中常用的共识机制。</p>
<ul>
<li>优点：实现秒级的快速共识机制，保证一致性。</li>
<li>缺点：去中心化程度不如公有链上的共识机制；更适合多方参与的多中心商业模式。</li>
</ul>
<h2 id="41-拜占庭将军问题-byzantine-generals-problem-bgp">4.1 拜占庭将军问题/ Byzantine Generals Problem/ BGP</h2>
<p><a href="http://lamport.azurewebsites.net/pubs/byz.pdf">拜占庭将军问题</a>由莱斯利·兰波特在其同名论文中提出的分布式对等网络通信容错问题。在分布式计算中，不同的计算机通过通讯交换信息达成共识而按照同一套协作策略行动。但有时候，系统中的成员计算机可能出错而发送错误的信息，用于传递信息的通讯网络也可能导致信息损坏，使得网络中不同的成员关于全体协作的策略得出不同结论，从而破坏系统一致性。拜占庭将军问题被认为是容错性问题中最难的问题类型之一。</p>
<h2 id="42-改进型实用拜占庭容错-practical-byzantine-fault-tolerance-pbft">4.2 改进型实用拜占庭容错/ Practical Byzantine Fault Tolerance/ PBFT</h2>
<p>PBET 共识机制是少数服从多数，根据信息在分布式网络中节点间互相交换后各节点列出所有得到的信息，一个节点代表一票，选择大多数的结果作为解决办法。PBET 将容错量控制在全部节点数的 1/3，即如只要有超过 2/3 的正常节点，整个系统便可正常运作。</p>
<h2 id="43-授权拜占庭容错算法-delegated-byzantine-fault-tolerance-dbft">4.3 授权拜占庭容错算法/ Delegated Byzantine Fault Tolerance /dBFT</h2>
<p>dBFT，是基于持有权益比例来选出专门的记账人（记账节点），然后记账人之间通过拜占庭容错算法（即少数服从多数的投票机制）来达成共识，决定动态参与节点。dBFT 可以容忍任何类型的错误，且专门的多个记账人使得每一个区块都有最终性、不会分叉。</p>
<h2 id="44-联邦拜占庭协议-federated-byzantine-agreement-fba">4.4 联邦拜占庭协议/ Federated Byzantine Agreement / FBA</h2>
<p>联邦拜占庭协议的主要特性是去中心化和任意行为容错，通过分布式的方法，达到法定人数或者节点足够的群体能达成共识，每一个节点不需要依赖相同的参与者就能决定信任的对象来完成共识。</p>
<h1 id="5-图灵完备">5 图灵完备</h1>
<p>一切可计算的问题都能计算，这样的虚拟机或者编程语言就叫图灵完备的。</p>
<h2 id="51-图灵完备的系统和图灵完备的语言">5.1 图灵完备的系统和图灵完备的语言</h2>
<p>一个能计算出每个<strong>图灵可计算函数</strong>（Turing-computable function）的计算系统被称为图灵完备的。一个语言是图灵完备的，意味着该语言的计算能力与一个<strong>通用图灵机</strong> （Universal Turing Machine）相当，这也是现代计算机语言所能拥有的最高能力。</p>
<h2 id="52-图灵完备深入解释">5.2 图灵完备深入解释</h2>
<p>在可计算理论中，当一组数据操作的规则（一组指令集，编程语言，或者元胞自动机）满足任意数据按照一定的顺序可以计算出结果，被称为<strong>图灵完备</strong>（turing complete）。一个有图灵完备指令集的设备被定义为通用计算机。如果是图灵完备的，它（计算机设备）有能力执行条件跳转（“if” 和 “goto”语句）以及改变内存数据。 如果某个东西展现出了图灵完备，它就有能力表现出可以模拟原始计算机，而即使最简单的计算机也能模拟出最复杂的计算机。所有的通用编程语言和现代计算机的指令集都是图灵完备的（C++ template 就是图灵完备的），都能解决内存有限的问题。图灵完备的机器都被定义有无限内存，但是机器指令集却通常定义为只工作在特定的，有限数量的 RAM 上。</p>
<h2 id="53-图灵完备优缺点">5.3 图灵完备优缺点</h2>
<p>图灵完备意味着你的语言可以做到能够用图灵机能做到的所有事情，可以解决所有的可计算问题。 图灵不完备也不是没有意义，有些场景我们需要限制语言本身。 如限制循环和递归，可以保证该语言能写的程序一定是终止的。图灵不完备会更安全些，图灵完备会更智能些。</p>
<h2 id="54比特币的图灵非完备性">5.4比特币的图灵非完备性</h2>
<p>比特币脚本语言包含许多操作，但都故意限定为一种重要的方式——没有循环或者复杂流控制功能以外的其他条件的流控制。这样就保证了脚本语言的图灵非完备性，这意味着脚本的复杂性有限，交易可执行的次数也可预见。脚本并不是一种通用语言，施加的这些限制确保该语言不被用于创造无限循环或其它类型的逻辑炸弹，这样的炸弹可以植入在一笔交易中，通过引起拒绝服务的方式攻击比特币网络。受限制的语言能防止交易激活机制被人当作薄弱环节而加以利用。</p>
<h2 id="55-以太坊是一个图灵完备的区块链">5.5 以太坊是一个图灵完备的区块链</h2>
<p>以太坊的核心就是能够运行“无所不能”的智能合约，拥有图灵完备的编程语言，比如 Solidity，可以解决所有可计算问题。</p>
<h1 id="6-零知识证明">6 零知识证明</h1>
<p>“零知识证明”－zero-knowledge proof，是由S.Goldwasser、S.Micali及C.Rackoff在20世纪80年代初提出的。它指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的。零知识证明实质上是一种涉及两方或更多方的协议，即两方或更多方完成一项任务所需采取的一系列步骤。证明者向验证者证明并使其相信自己知道或拥有某一消息，但证明过程不能向验证者泄漏任何关于被证明消息的信息。大量事实证明，零知识证明在密码学中非常有用。如果能够将零知识证明用于验证，将可以有效解决许多问题。</p>
<h2 id="61-定义">6.1 定义</h2>
<p>零知识证明满足三个属性：</p>
<ol>
<li>如果语句为真，诚实的验证者（即，正确遵循协议的验证者）将由诚实的证明者确信这一事实。</li>
<li>如果语句为假，不排除有概率欺骗者可以说服诚实的验证者它是真的。</li>
<li>如果语句为真，证明者的目的就是向验证者证明并使验证者相信自己知道或拥有某一消息，而在证明过程中不可向验证者泄漏任何有关被证明消息的内容。</li>
</ol>
<p>零知识证明并不是数学意义上的证明，因为它存在小概率的误差，欺骗者有可能通过虚假陈述骗过证明者。换句话来说，零知识证明是概率证明而不是确定性证明。但是也存在有技术能将误差降低到可以忽略的值。</p>
<p>零知识的形式定义必须使用一些计算模型，最常见的是图灵机的计算模型。</p>
<h2 id="62-证明举例">6.2 证明举例</h2>
<h3 id="621-案例一">6.2.1 案例一</h3>
<p>A 要向 B 证明自己拥有某个房间的钥匙，假设该房间只能用钥匙打开锁，而其他任何方法都打不开。这时有 2 个方法：</p>
<ol>
<li>A 把钥匙出示给 B，B 用这把钥匙打开该房间的锁，从而证明 A 拥有该房间的正确的钥匙。</li>
<li>B 确定该房间内有某一物体，A 用自己拥有的钥匙打开该房间的门，然后把物体拿出来出示给 B，从而证明自己确实拥有该房间的钥匙。</li>
</ol>
<p>后面的方法 2 属于零知识证明。好处在于在整个证明的过程中，B 始终不能看到钥匙的样子，从而避免了钥匙的泄露。</p>
<h3 id="622-案例二">6.2.2 案例二</h3>
<p>A 拥有 B 的公钥，A 没有见过 B，而 B 见过 A 的照片，偶然一天 2 人见面了，B 认出了 A，但 A 不能确定面前的人是否是 B，这时 B 要向 A 证明自己是 B，也有 2 个方法。</p>
<ol>
<li>B 把自己的私钥给 A，A 用这个私钥对某个数据加密，然后用 B 的公钥解密，如果正确，则证明对方确实是B。</li>
<li>A 给出一个随机值，B 用自己的私钥对其加密，然后把加密后的数据交给 A，A 用 B 的公钥解密，如果能够得到原来的随机值，则证明对方是 B。</li>
</ol>
<p>后面方法 2 属于零知识证明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式——完整版教程]]></title>
        <id>https://tdmaker.github.io/faded/post/regular-expression-full-tutorial/</id>
        <link href="https://tdmaker.github.io/faded/post/regular-expression-full-tutorial/">
        </link>
        <updated>2020-04-06T13:38:14.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><a href="https://juejin.im/post/5965943ff265da6c30653879">JS正则表达式完整教程（略长）</a></p>
</blockquote>
<h1 id="引言">引言</h1>
<p>本文内容共有七章，用 JavaScript 语言完整地讨论了正则表达式的方方面面。<br>
具体章节如下：</p>
<ul>
<li><a href="#%E5%BC%95%E8%A8%80">引言</a></li>
<li><a href="#%E7%AC%AC-1-%E7%AB%A0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D%E6%94%BB%E7%95%A5">第 1 章 正则表达式字符匹配攻略</a></li>
<li><a href="#%E7%AC%AC-2-%E7%AB%A0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%8D%E7%BD%AE%E5%8C%B9%E9%85%8D%E6%94%BB%E7%95%A5">第 2 章 正则表达式位置匹配攻略</a></li>
<li><a href="#%E7%AC%AC-3-%E7%AB%A0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8B%AC%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8">第 3 章 正则表达式括号的作用</a></li>
<li><a href="#%E7%AC%AC-4-%E7%AB%A0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%8E%9F%E7%90%86">第 4 章 正则表达式回溯法原理</a></li>
<li><a href="#%E7%AC%AC-5-%E7%AB%A0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%8B%86%E5%88%86">第 5 章 正则表达式的拆分</a></li>
<li><a href="#%E7%AC%AC-6-%E7%AB%A0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%9E%84%E5%BB%BA">第 6 章 正则表达式的构建</a></li>
<li><a href="#%E7%AC%AC-7-%E7%AB%A0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BC%96%E7%A8%8B">第 7 章 正则表达式编程后记</a></li>
</ul>
<p>下面简单地说说每一章都讨论了什么。</p>
<p><strong>正则是匹配模式，要么匹配字符，要么匹配位置</strong>。<br>
第 1 章和第 2 章以这个角度去讲解了正则的基础。</p>
<p><strong>在正则中可以使用括号捕获数据，要么在 API 中进行分组引用，要么在正则里进行反向引用</strong>。<br>
这是第 3 章的主题，讲解了正则中括号的作用。</p>
<p><strong>学习正则表达式，是需要了解其匹配原理的</strong>。第 4 章，讲解了正则了正则表达式的回溯法原理。另外在第 6 章里，也讲解了正则的表达式的整体工作原理。</p>
<p><strong>不仅能看懂别人的正则，还要自己会写正则</strong>。<br>
第 5 章，是从读的角度，去拆分一个正则表达式，而第 6 章是从写的角度，去构建一个正则表达式。</p>
<p><strong>学习正则，是为了在真实世界里应用的</strong>。<br>
第 7 章讲解了正则的用法，和相关 API 需要注意的地方。</p>
<h1 id="第-1-章-正则表达式字符匹配攻略">第 1 章 正则表达式字符匹配攻略</h1>
<p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p>
<p>然而关于正则如何匹配字符的学习，大部分人都觉得这块比较杂乱。</p>
<p>毕竟元字符太多了，看起来没有系统性，不好记。本章就解决这个问题。</p>
<p>内容包括：</p>
<ol>
<li><a href="#11-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D">两种模糊匹配</a></li>
<li><a href="#12-%E5%AD%97%E7%AC%A6%E7%BB%84">字符组</a></li>
<li><a href="#13-%E9%87%8F%E8%AF%8D">量词</a></li>
<li><a href="#14-%E5%A4%9A%E9%80%89%E5%88%86%E6%94%AF">多选分支</a></li>
<li><a href="#14-%E5%A4%9A%E9%80%89%E5%88%86%E6%94%AF">案例分析</a></li>
</ol>
<h2 id="11-两种模糊匹配">1.1 两种模糊匹配</h2>
<p>如果正则只有精确匹配是没多大意义的，比如 <code>/hello/</code>，也只能匹配字符串中的 &quot;hello&quot; 这个子串。</p>
<pre><code class="language-javascript">const regex = /hello/;
console.log(regex.test('hello')); 
// =&gt; true
</code></pre>
<p>正则表达式之所以强大，是因为其能实现模糊匹配。而模糊匹配，有两个方向上的“模糊”：<a href="#111-%E6%A8%AA%E5%90%91%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D">横向模糊匹配</a>和<a href="#112-%E7%BA%B5%E5%90%91%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D">纵向模糊匹配</a>。</p>
<h3 id="111-横向模糊匹配">1.1.1 横向模糊匹配</h3>
<p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。其实现的方式是使用量词。譬如 <code>{m,n}</code>，表示连续出现最少 m 次，最多 n 次。比如 <code>/ab{2,5}c/</code> 表示匹配这样一个字符串：第一个字符是 &quot;a&quot;，接下来是 2 到 5 个字符是 &quot;b&quot;，最后是字符 &quot;c&quot;。测试如下：</p>
<pre><code class="language-javascript">const regex = /ab{2,5}c/g;
const string = 'abc abbc abbbc abbbbc abbbbbc abbbbbbc';
console.log(string.match(regex)); 
// =&gt; [&quot;abbc&quot;, &quot;abbbc&quot;, &quot;abbbbc&quot;, &quot;abbbbbc&quot;]
</code></pre>
<p>注意：案例中用的正则是 <code>/ab{2,5}c/g</code>，后面多了 <code>g</code>，它是正则的一个修饰符。表示全局匹配，即在目标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个”。g 是单词 global 的首字母。</p>
<h3 id="112-纵向模糊匹配">1.1.2 纵向模糊匹配</h3>
<p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。其实现的方式是使用字符组。譬如 <code>[abc]</code>，表示该字符是可以字符 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 中的任何一个。比如 <code>/a[123]b/</code> 可以匹配如下三种字符串：&quot;a1b&quot;、&quot;a2b&quot;、&quot;a3b&quot;。测试如下：</p>
<pre><code class="language-javascript">const regex = /a[123]b/g;
const string = 'a0b a1b a2b a3b a4b';
console.log(string.match(regex)); 
// =&gt; [&quot;a1b&quot;, &quot;a2b&quot;, &quot;a3b&quot;]
</code></pre>
<p>以上就是本章讲的主体内容，只要掌握横向和纵向模糊匹配，就能解决很大部分正则匹配问题。</p>
<p>接下来的内容就是展开说了，如果对此都比较熟悉的话，可以跳过，直接看本章案例那节。</p>
<h2 id="12-字符组">1.2 字符组</h2>
<p>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如 <code>[abc]</code>，表示匹配一个字符，它可以是 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 之一。</p>
<h3 id="121-范围表示法">1.2.1 范围表示法</h3>
<p>如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。</p>
<p>比如 <code>[123456abcdefGHIJKLM]</code>，可以写成 <code>[1-6a-fG-M]</code>。用连字符 <code>-</code> 来省略和简写。</p>
<p>因为连字符有特殊用途，那么要匹配 &quot;a&quot;、&quot;-&quot;、&quot;z&quot; 这三者中任意一个字符，该怎么做呢？</p>
<p>不能写成 <code>[a-z]</code>，因为其表示小写字符中的任何一个字符。</p>
<p>可以写成如下的方式：<code>[-az]</code> 或<code>[az-]</code> 或 <code>[a\-z]</code>。即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。</p>
<h3 id="122-排除字符组">1.2.2 排除字符组</h3>
<p>纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是 &quot;a&quot;、&quot;b&quot;、&quot;c&quot;。</p>
<p>此时就是排除字符组（反义字符组）的概念。例如 <code>[^abc]</code>，表示是一个除 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 之外的任意一个字符。字符组的第一位放 <code>^</code>（脱字符），表示求反的概念。</p>
<p>当然，也有相应的范围表示法。</p>
<h3 id="123-常见的简写形式">1.2.3 常见的简写形式</h3>
<p>有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。</p>
<ul>
<li><code>\d</code> 就是 <code>[0-9]</code>。表示是一位数字。记忆方式：其英文是 digit（数字）；</li>
<li><code>\D</code> 就是 <code>[^0-9]</code>。表示除数字外的任意字符；</li>
<li><code>\w</code> 就是 <code>[0-9a-zA-Z_]</code>。表示数字、大小写字母和下划线。记忆方式：w 是 word 的简写，也称单词字符；</li>
<li><code>\W</code> 是 <code>[^0-9a-zA-Z_]</code>。非单词字符；</li>
<li><code>\s</code>是 <code>[ \t\v\n\r\f]</code>。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s 是 space character 的首字母；</li>
<li><code>\S</code> 是 <code>[^ \t\v\n\r\f]</code>。 非空白符。</li>
<li><code>.</code> 就是 <code>[^\n\r\u2028\u2029]</code>。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号...中的每个点，都可以理解成占位符，表示任何类似的东西。</li>
</ul>
<p>如果要匹配任意字符怎么办？可以使用 <code>[\d\D]</code>、<code>[\w\W]</code>、<code>[\s\S]</code> 和 <code>[^]</code> 中任何的一个。</p>
<h2 id="13-量词">1.3 量词</h2>
<p>量词也称重复。掌握 <code>{m,n}</code> 的准确含义后，只需要记住一些简写形式。</p>
<h3 id="131-简写形式">1.3.1 简写形式</h3>
<ul>
<li><code>{m,}</code> 表示至少出现 m 次。</li>
<li><code>{m}</code> 等价于 <code>{m,m}</code>，表示出现 m 次。</li>
<li><code>?</code> 等价于 <code>{0,1}</code>，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</li>
<li><code>+</code>  等价于 <code>{1,}</code>，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</li>
<li><code>*</code> 等价于 <code>{0,}</code>，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</li>
</ul>
<h3 id="132-贪婪匹配和惰性匹配">1.3.2 贪婪匹配和惰性匹配</h3>
<p>看如下的例子：</p>
<pre><code class="language-javascript">const regex = /\d{2,5}/g;
const string = '123 1234 12345 123456';
console.log(string.match(regex)); 
// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]
</code></pre>
<p>其中正则 <code>/\d{2,5}/</code>，表示数字连续出现 2 到 5 次。会匹配 2 位、3 位、4 位、5 位连续数字。</p>
<p>但是其是贪婪的，它会尽可能多的匹配。你能给我 6 个，我就要 5 个。你能给我3个，我就要 3 个。反正只要在能力范围内，越多越好。</p>
<p>我们知道有时贪婪不是一件好事（请看文章最后一个例子）。而惰性匹配，就是尽可能少的匹配：</p>
<pre><code class="language-javascript">const regex = /\d{2,5}?/g;
const string = '123 1234 12345 123456';
console.log(string.match(regex)); 
// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]
</code></pre>
<p>其中 <code>/\d{2,5}?/</code> 表示，虽然 2 到 5 次都行，当 2 个就够的时候，就不在往下尝试了。</p>
<p>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：</p>
<ul>
<li><code>{m,n}?</code></li>
<li><code>{m,}?</code></li>
<li><code>??</code></li>
<li><code>+?</code></li>
<li><code>*?</code></li>
</ul>
<h2 id="14-多选分支">1.4 多选分支</h2>
<p>一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。</p>
<p>具体形式如下：<code>(p1|p2|p3)</code>，其中 <code>p1</code>、<code>p2</code> 和 <code>p3</code> 是子模式，用 <code>|</code>（管道符）分隔，表示其中任何之一。</p>
<p>例如要匹配 &quot;good&quot; 和 &quot;nice&quot; 可以使用 <code>/good|nice/</code>。测试如下：</p>
<pre><code class="language-javascript">const regex = /good|nice/g;
const string = 'good idea, nice try.';
console.log(string.match(regex)); 
// =&gt; [&quot;good&quot;, &quot;nice&quot;]
</code></pre>
<p>但有个事实我们应该注意，比如我用 <code>/good|goodbye/</code>，去匹配 &quot;goodbye&quot; 字符串时，结果是 &quot;good&quot;：</p>
<pre><code class="language-javascript">const regex = /good|goodbye/g;
const string = 'goodbye';
console.log(string.match(regex)); 
// =&gt; [&quot;good&quot;]
</code></pre>
<p>而把正则改成 <code>/goodbye|good/</code>，结果是：</p>
<pre><code class="language-javascript">var regex = /goodbye|good/g;
var string = 'goodbye';
console.log(string.match(regex)); 
// =&gt; [&quot;goodbye&quot;]
</code></pre>
<p>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。</p>
<h2 id="15-案例分析">1.5 案例分析</h2>
<p>匹配字符，无非就是字符组、量词和分支结构的组合使用罢了。</p>
<p>下面找几个例子演练一下（其中，每个正则并不是只有唯一写法）：</p>
<h3 id="151-匹配-16-进制颜色值">1.5.1 匹配 16 进制颜色值</h3>
<p>要求匹配：</p>
<ul>
<li>#ffbbad</li>
<li>#Fc01DF</li>
<li>#FFF</li>
<li>#ffE</li>
</ul>
<p>分析：</p>
<ol>
<li>表示一个 16 进制字符，可以用字符组 <code>[0-9a-fA-F]</code>。</li>
<li>其中字符可以出现 3 或 6 次，需要是用量词和分支结构。</li>
<li>使用分支结构时，需要注意顺序。</li>
</ol>
<p>正则如下：</p>
<pre><code class="language-javascript">const regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;
const string = '#ffbbad #Fc01DF #FFF #ffE';
console.log(string.match(regex)); 
// =&gt; [&quot;#ffbbad&quot;, &quot;#Fc01DF&quot;, &quot;#FFF&quot;, &quot;#ffE&quot;]
</code></pre>
<h3 id="152-匹配时间">1.5.2 匹配时间</h3>
<p>以 24 小时制为例。</p>
<p>要求匹配：</p>
<ul>
<li>23:59</li>
<li>02:07</li>
</ul>
<p>分析：</p>
<ol>
<li>共 4 位数字，第一位数字可以为 <code>[0-2]</code>；</li>
<li>当第 1 位为 2 时，第2位可以为 <code>[0-3]</code>，其他情况时，第 2 位为 <code>[0-9]</code>；</li>
<li>第 3 位数字为 <code>[0-5]</code>，第 4 位为 <code>[0-9]</code>。</li>
</ol>
<p>正则如下：</p>
<pre><code class="language-javascript">const regex = /^([01][0-9]|[2][0-3]):[0-5][0-9]$/;
console.log(regex.test('23:59')); 
console.log(regex.test('02:07')); 
// =&gt; true
// =&gt; true
</code></pre>
<p>如果也要求匹配 7:9，也就是说时分前面的 0 可以省略。</p>
<p>此时正则变成：</p>
<pre><code class="language-javascript">const regex = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/;
console.log( regex.test('23:59') ); 
console.log( regex.test('02:07') ); 
console.log( regex.test('7:9') ); 
// =&gt; true
// =&gt; true
// =&gt; true
</code></pre>
<h3 id="153-匹配日期">1.5.3 匹配日期</h3>
<p>比如 yyyy-mm-dd 格式为例。</p>
<p>要求匹配：</p>
<ul>
<li>2017-06-10</li>
</ul>
<p>分析：</p>
<ol>
<li>年，四位数字即可，可用 <code>[0-9]{4}</code>；</li>
<li>月，共 12 个月，分两种情况 01、02、……、09 和 10、11、12，可用 <code>(0[1-9]|1[0-2])</code>；</li>
<li>日，最大 31 天，可用 <code>(0[1-9]|[12][0-9]|3[01])</code>。</li>
</ol>
<p>正则如下：</p>
<pre><code class="language-javascript">const regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;
console.log(regex.test('2017-06-10')); 
// =&gt; true
</code></pre>
<h3 id="154-window-操作系统文件路径">1.5.4 Window 操作系统文件路径</h3>
<p>要求匹配：</p>
<ul>
<li>F:\study\javascript\regex\regular expression.pdf</li>
<li>F:\study\javascript\regex\</li>
<li>F:\study\javascript<br>
-F:\</li>
</ul>
<p>分析：</p>
<ol>
<li>整体模式是: 盘符:\文件夹\文件夹\文件夹\；</li>
<li>其中匹配 F:\，需要使用<code>[a-zA-Z]:\\</code>，其中盘符不区分大小写，注意 <code>\</code> 字符需要转义；</li>
<li>文件名或者文件夹名，不能包含一些特殊字符，此时我们需要排除字符组 <code>[^\\:*&lt;&gt;|&quot;?\r\n/]</code> 来表示合法字符。另外不能为空名，至少有一个字符，也就是要使用量词 <code>+</code>。因此匹配 &quot;文件夹&quot;，可用<code>[^\\:*&lt;&gt;|&quot;?\r\n/]+\\</code>；</li>
<li>另外“文件夹\”，可以出现任意次。也就是 <code>([^\\:*&lt;&gt;|&quot;?\r\n/]+\\)*</code>。其中括号提供子表达式；</li>
<li>路径的最后一部分可以是“文件夹”，没有 <code>\</code>，因此需要添加 <code>([^\\:*&lt;&gt;|&quot;?\r\n/]+)?</code>。</li>
</ol>
<p>最后拼接成了一个看起来比较复杂的正则：</p>
<pre><code class="language-javascript">const regex = /^[a-zA-Z]:\\([^\\:*&lt;&gt;|&quot;?\r\n/]+\\)*([^\\:*&lt;&gt;|&quot;?\r\n/]+)?$/;
console.log(regex.test('F:\\study\\javascript\\regex\\regular expression.pdf')); 
console.log(regex.test('F:\\study\\javascript\\regex\\')); 
console.log(regex.test('F:\\study\\javascript')); 
console.log(regex.test('F:\\')); 
// =&gt; true
// =&gt; true
// =&gt; true
// =&gt; true
</code></pre>
<p>其中，JS 中字符串表示 \ 时，也要转义。</p>
<h3 id="155-匹配-id">1.5.5 匹配 id</h3>
<p>要求从</p>
<pre><code class="language-html">&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;&lt;/div&gt;
</code></pre>
<p>提取出 id=&quot;container&quot;。</p>
<p>可能最开始想到的正则是：</p>
<pre><code class="language-javascript">const regex = /id=&quot;.*&quot;/
const string = '&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;&lt;/div&gt;';
console.log(string.match(regex)[0]); 
// =&gt; id=&quot;container&quot; class=&quot;main&quot;
</code></pre>
<p>因为 <code>.</code> 是通配符，本身就匹配双引号的，而量词 <code>*</code> 又是贪婪的，当遇到 container 后面双引号时，不会停下来，会继续匹配，直到遇到最后一个双引号为止。</p>
<p>解决之道，可以使用惰性匹配：</p>
<pre><code class="language-javascript">const regex = /id=&quot;.*?&quot;/
const string = '&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;&lt;/div&gt;';
console.log(string.match(regex)[0]); 
// =&gt; id=&quot;container&quot;
</code></pre>
<p>当然，这样也会有个问题。效率比较低，因为其匹配原理会涉及到“回溯”这个概念（这里也只是顺便提一下，第四章会详细说明）。可以优化如下：</p>
<pre><code class="language-javascript">const regex = /id=&quot;[^&quot;]*&quot;/
const string = '&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;&lt;/div&gt;';
console.log(string.match(regex)[0]); 
// =&gt; id=&quot;container&quot;
</code></pre>
<h2 id="第-1-章小结">第 1 章小结</h2>
<p>字符匹配相关的案例，挺多的，不一而足。</p>
<p>掌握字符组和量词就能解决大部分常见的情形，也就是说，当你会了这二者，JS 正则算是入门了。</p>
<h1 id="第-2-章-正则表达式位置匹配攻略">第 2 章 正则表达式位置匹配攻略</h1>
<p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p>
<p>然而大部分人学习正则时，对于匹配位置的重视程度没有那么高。</p>
<p>本章讲讲正则匹配位置的总总。</p>
<p>内容包括：</p>
<ol>
<li>什么是位置？</li>
<li>如何匹配位置？</li>
<li>位置的特性</li>
<li>几个应用实例分析</li>
</ol>
<h2 id="21-什么是位置呢">2.1 什么是位置呢？</h2>
<p>位置是相邻字符之间的位置。比如，下图中箭头所指的地方：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586184949865.png" alt="" loading="lazy"></p>
<h2 id="22-如何匹配位置呢">2.2. 如何匹配位置呢？</h2>
<p>在 ES5 中，共有 6 个锚字符：<code>^ $ \b \B (?=p) (?!p)</code>。</p>
<h3 id="221-和">2.2.1 <code>^</code> 和 <code>$</code></h3>
<ul>
<li><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头；</li>
<li><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</li>
</ul>
<p>比如我们把字符串的开头和结尾用“#”替换（位置是可以替换成字符的！）：</p>
<pre><code class="language-javascript">const result = 'hello'.replace(/^|$/g, '#');
console.log(result); 
// =&gt; &quot;#hello#&quot;
</code></pre>
<p>多行匹配模式时，二者是行的概念，这个需要我们的注意：</p>
<pre><code class="language-javascript">const result = 'I\nlove\njavascript'.replace(/^|$/gm, '#');
console.log(result);
/*
#I#
#love#
#javascript#
*/
</code></pre>
<h3 id="222-b-和-b">2.2.2 <code>\b</code> 和 <code>\B</code></h3>
<p><code>\b</code> 是单词边界，具体就是 <code>\w</code> 和 <code>\W</code> 之间的位置，也包括 <code>\w</code> 和 <code>^</code> 之间的位置，也包括 <code>\w</code>和 <code>$</code> 之间的位置。</p>
<p>比如一个文件名是 &quot;[JS] Lesson_01.mp4&quot; 中的 <code>\b</code>，如下：</p>
<pre><code class="language-javascript">const result = '[JS] Lesson_01.mp4'.replace(/\b/g, '#');
console.log(result); 
// =&gt; &quot;[#JS#] #Lesson_01#.#mp4#&quot;
</code></pre>
<p>为什么是这样呢？这需要仔细看看。</p>
<p>首先，我们知道，<code>\w</code> 是字符组 <code>[0-9a-zA-Z_]</code> 的简写形式，即 <code>\w</code> 是字母数字或者下划线的中任何一个字符。而 <code>\W</code> 是排除字符组 <code>[^0-9a-zA-Z_]</code> 的简写形式，即 <code>\W</code> 是 <code>\w</code> 以外的任何一个字符。此时我们可以看看 &quot;[#JS#] #Lesson_01#.#mp4#&quot; 中的每一个 &quot;#&quot;，是怎么来的。</p>
<ol>
<li>第一个&quot;#&quot;，两边是 &quot;[&quot;与 &quot;J&quot;，是 <code>\W</code> 和 <code>\w</code> 之间的位置；</li>
<li>第二个&quot;#&quot;，两边是 &quot;S&quot; 与 &quot;]&quot;，也就是 <code>\w</code> 和 <code>\W</code> 之间的位置；</li>
<li>第三个&quot;#&quot;，两边是空格与 &quot;L&quot;，也就是 <code>\W</code> 和 <code>\w</code> 之间的位置；</li>
<li>第四个&quot;#&quot;，两边是 &quot;1&quot; 与 &quot;.&quot;，也就是 <code>\w</code> 和 <code>\W</code> 之间的位置；</li>
<li>第五个&quot;#&quot;，两边是 &quot;.&quot;与 &quot;m&quot;，也就是 <code>\W</code> 和 <code>\w</code> 之间的位置；</li>
<li>第六个&quot;#&quot;，其对应的位置是结尾，但其前面的字符 &quot;4&quot; 是 <code>\w</code>，即 <code>\w</code> 和 <code>$</code> 之间的位置。</li>
</ol>
<p>知道了 <code>\b</code> 的概念后，那么 <code>\B</code> 也就相对好理解了。</p>
<p><code>\B</code> 就是 <code>\b</code> 的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉 <code>\b</code>，剩下的都是 <code>\B</code> 的。</p>
<p>具体说来就是 <code>\w</code> 与 <code>\w</code>、<code>\W</code> 与 <code>\W</code>、<code>^</code> 与 <code>\W</code>，<code>\W</code> 与 <code>$</code> 之间的位置。</p>
<p>比如上面的例子，把所有 <code>\B</code> 替换成 &quot;#&quot;：</p>
<pre><code class="language-javascript">const result = '[JS] Lesson_01.mp4'.replace(/\B/g, '#');
console.log(result); 
// =&gt; &quot;#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4&quot;
</code></pre>
<h3 id="223-p-和-p">2.2.3 <code>(?=p)</code> 和 <code>(?!p)</code></h3>
<p><code>(?=p)</code>，其中 p 是一个子模式，即 p 前面的位置。</p>
<p>比如 <code>(?=l)</code>，表示 &quot;l&quot; 字符前面的位置，例如：</p>
<pre><code class="language-javascript">const result = 'hello'.replace(/(?=l)/g, '#');
console.log(result); 
// =&gt; &quot;he#l#lo&quot;
</code></pre>
<p>而 <code>(?!p)</code> 就是 <code>(?=p)</code> 的反面意思，比如：</p>
<pre><code class="language-javascript">const result = 'hello'.replace(/(?!l)/g, '#');
console.log(result); 
// =&gt; &quot;#h#ell#o#&quot;
</code></pre>
<p>二者的学名分别是 <strong>positive lookahead</strong> 和 <strong>negative lookahead</strong>。</p>
<p>中文翻译分别是<strong>正向先行断言</strong>和<strong>负向先行断言</strong>。</p>
<p>ES6中，还支持 <strong>positive lookbehind</strong> 和 <strong>negative lookbehind</strong>。</p>
<p>具体是 <code>(?&lt;=p)</code> 和 <code>(?&lt;!p)</code>。</p>
<p>也有书上把这四个东西，翻译成环视，即看看右边或看看左边。</p>
<p>但一般书上，没有很好强调这四者是个位置。</p>
<p>比如 <code>(?=p)</code>，一般都理解成：要求接下来的字符与 p 匹配，但不能包括 p 的那些字符。</p>
<p>而在本人看来 <code>(?=p)</code> 就与 <code>^</code> 一样好理解，就是 p 前面的那个位置。</p>
<h2 id="23-位置的特性">2.3. 位置的特性</h2>
<p>对于位置的理解，我们可以理解成空字符&quot;&quot;。</p>
<p>比如 &quot;hello&quot; 字符串等价于如下的形式：</p>
<pre><code class="language-javascript">'hello' == '' + 'h' + '' + 'e' + '' + 'l' + '' + 'l' + 'o' + '';
</code></pre>
<p>也等价于：</p>
<pre><code class="language-javascript">'hello' == '' + '' + 'hello';
</code></pre>
<p>因此，把 <code>/^hello$/</code> 写成 <code>/^^hello$$$/</code>，是没有任何问题的：</p>
<pre><code class="language-javascript">const result = /^^hello$$$/.test('hello');
console.log(result); 
// =&gt; true
</code></pre>
<p>甚至可以写成更复杂的：</p>
<pre><code class="language-javascript">const result = /(?=he)^^he(?=\w)llo$\b\b$/.test('hello');
console.log(result); 
// =&gt; true
</code></pre>
<p>也就是说字符之间的位置，可以写成多个。</p>
<p>把位置理解空字符，是对位置非常有效的理解方式。</p>
<h2 id="24-相关案例">2.4 相关案例</h2>
<h3 id="241-不匹配任何东西的正则">2.4.1 不匹配任何东西的正则</h3>
<p>让你写个正则不匹配任何东西</p>
<p>easy，<code>/.^/</code></p>
<p>因为此正则要求只有一个字符，但该字符后面是开头。</p>
<h3 id="242-数字的千位分隔符表示法">2.4.2 数字的千位分隔符表示法</h3>
<p>比如把 &quot;12345678&quot;，变成 &quot;12,345,678&quot;。</p>
<p>可见是需要把相应的位置替换成 &quot;,&quot;。</p>
<p>思路是什么呢？</p>
<h4 id="2421-弄出最后一个逗号">2.4.2.1 弄出最后一个逗号</h4>
<p>使用 <code>(?=\d{3}$)</code> 就可以做到：</p>
<pre><code class="language-javascript">const result = '12345678'.replace(/(?=\d{3}$)/g, ',')
console.log(result); 
// =&gt; &quot;12345,678&quot;
</code></pre>
<h4 id="2422-弄出所有的逗号">2.4.2.2 弄出所有的逗号</h4>
<p>因为逗号出现的位置，要求后面 3 个数字一组，也就是 <code>\d{3}</code> 至少出现一次。</p>
<p>此时可以使用量词 <code>+</code>：</p>
<pre><code class="language-javascript">const result = '12345678'.replace(/(?=(\d{3})+$)/g, ',')
console.log(result); 
// =&gt; &quot;12,345,678&quot;
</code></pre>
<h4 id="2423-匹配其余案例">2.4.2.3 匹配其余案例</h4>
<p>写完正则后，要多验证几个案例，此时我们会发现问题：</p>
<pre><code class="language-javascript">const result = '123456789'.replace(/(?=(\d{3})+$)/g, ',')
console.log(result); 
// =&gt; &quot;,123,456,789&quot;
</code></pre>
<p>因为上面的正则，仅仅表示把从结尾向前数，一但是 3 的倍数，就把其前面的位置替换成逗号。因此才会出现这个问题。</p>
<p>怎么解决呢？我们要求匹配的到这个位置不能是开头。</p>
<p>我们知道匹配开头可以使用 <code>^</code>，但要求这个位置不是开头怎么办？easy，<code>(?!^)</code>，你想到了吗？测试如下：</p>
<pre><code class="language-javascript">const string1 = '12345678';
const string2 = '123456789';
const reg = /(?!^)(?=(\d{3})+$)/g;

const result = string1.replace(reg, ',')
console.log(result); 
// =&gt; &quot;12,345,678&quot;
result = string2.replace(reg, ',');
console.log(result); 
// =&gt; &quot;123,456,789&quot;
</code></pre>
<h4 id="2424-支持其他形式">2.4.2.4 支持其他形式</h4>
<p>如果要把 &quot;12345678 123456789&quot; 替换成 &quot;12,345,678 123,456,789&quot;。</p>
<p>此时我们需要修改正则，把里面的开头 <code>^</code> 和结尾 <code>$</code>，替换成 <code>\b</code>：</p>
<pre><code class="language-javascript">const string = '12345678 123456789';
const reg = /(?!\b)(?=(\d{3})+\b)/g;

const result = string.replace(reg, ',');
console.log(result); 
// =&gt; &quot;12,345,678 123,456,789&quot;
</code></pre>
<p>其中 <code>(?!\b)</code> 怎么理解呢？</p>
<p>要求当前是一个位置，但不是 <code>\b</code> 前面的位置，其实 <code>(?!\b)</code> 说的就是 <code>\B</code>。</p>
<p>因此最终正则变成了：<code>/\B(?=(\d{3})+\b)/g</code>。</p>
<h3 id="243-验证密码问题">2.4.3 验证密码问题</h3>
<p>密码长度 6-12 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符。</p>
<p>此题，如果写成多个正则来判断，比较容易。但要写成一个正则就比较困难。</p>
<p>那么，我们就来挑战一下。看看我们对位置的理解是否深刻。</p>
<h4 id="2431-简化">2.4.3.1 简化</h4>
<p>不考虑“但必须至少包括 2 种字符”这一条件。我们可以容易写出：</p>
<pre><code class="language-javascript">const reg = /^[0-9A-Za-z]{6,12}$/;
</code></pre>
<h4 id="2432-判断是否包含有某一种字符">2.4.3.2 判断是否包含有某一种字符</h4>
<p>假设，要求的必须包含数字，怎么办？此时我们可以使用 <code>(?=.*[0-9])</code> 来做。</p>
<p>因此正则变成：</p>
<pre><code class="language-javascript">const reg = /(?=.*[0-9])^[0-9A-Za-z]{6,12}$/;
</code></pre>
<h4 id="2433-同时包含具体两种字符">2.4.3.3 同时包含具体两种字符</h4>
<p>比如同时包含数字和小写字母，可以用 <code>(?=.*[0-9])(?=.*[a-z])</code> 来做。</p>
<p>因此正则变成：</p>
<pre><code class="language-javascript">const reg = /(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]{6,12}$/;
</code></pre>
<h4 id="2434-解答">2.4.3.4 解答</h4>
<p>我们可以把原题变成下列几种情况之一：</p>
<ol>
<li>同时包含数字和小写字母；</li>
<li>同时包含数字和大写字母；</li>
<li>同时包含小写字母和大写字母；</li>
<li>同时包含数字、小写字母和大写字母。</li>
</ol>
<p>以上的 4 种情况是或的关系（实际上，可以不用第 4 条）。</p>
<p>最终答案是：</p>
<pre><code class="language-javascript">const reg = /((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9A-Za-z]{6,12}$/;
console.log(reg.test('1234567'));   // false 全是数字
console.log(reg.test('abcdef'));    // false 全是小写字母
console.log(reg.test('ABCDEFGH'));  // false 全是大写字母
console.log(reg.test('ab23C'));     // false 不足 6 位
console.log(reg.test('ABCDEF234')); // true  大写字母和数字
console.log(reg.test('abcdEF234')); // true  三者都有
</code></pre>
<h4 id="2435-解惑">2.4.3.5 解惑</h4>
<p>上面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。</p>
<p><code>/(?=.*[0-9])^[0-9A-Za-z]{6,12}$/</code></p>
<p>对于这个正则，我们只需要弄明白 <code>(?=.*[0-9])^</code>即可。</p>
<p>分开来看就是 <code>(?=.*[0-9])</code> 和 <code>^</code>。</p>
<p>表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。</p>
<p><code>(?=.*[0-9])</code> 表示该位置后面的字符匹配 <code>.*[0-9]</code>，即，有任何多个任意字符，后面再跟个数字。</p>
<p>翻译成大白话，就是接下来的字符，必须包含个数字。</p>
<h4 id="2436-另外一种解法">2.4.3.6 另外一种解法</h4>
<p>“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</p>
<p>那么要求“不能全部都是数字”，怎么做呢？<code>(?!p)</code> 出马！</p>
<p>对应的正则是：</p>
<pre><code class="language-javascript">const reg = /(?!^[0-9]{6,12}$)^[0-9A-Za-z]{6,12}$/;
</code></pre>
<p>三种“都不能”呢？</p>
<p>最终答案是：</p>
<pre><code class="language-javascript">const reg = /(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/;
console.log(reg.test('1234567'));   // false 全是数字
console.log(reg.test('abcdef'));    // false 全是小写字母
console.log(reg.test('ABCDEFGH'));  // false 全是大写字母
console.log(reg.test('ab23C'));     // false 不足 6 位
console.log(reg.test('ABCDEF234')); // true  大写字母和数字
console.log(reg.test('abcdEF234')); // true  三者都有
</code></pre>
<h3 id="第-2-章小结">第 2 章小结</h3>
<p>位置匹配相关的案例，挺多的，不一而足。</p>
<p>掌握匹配位置的这 6 个锚字符，给我们解决正则问题一个新工具。</p>
<h1 id="第-3-章-正则表达式括号的作用">第 3 章 正则表达式括号的作用</h1>
<p>不管哪门语言中都有括号。正则表达式也是一门语言，而括号的存在使这门语言更为强大。</p>
<p>对括号的使用是否得心应手，是衡量对正则的掌握水平的一个侧面标准。</p>
<p>括号的作用，其实三言两语就能说明白，括号提供了分组，便于我们引用它。</p>
<p>引用某个分组，会有两种情形：在 JavaScript 里引用它，在正则表达式里引用它。</p>
<p>本章内容虽相对简单，但我也要写长点。内容包括：</p>
<ol>
<li><a href="#31-%E5%88%86%E7%BB%84%E5%92%8C%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84">分组和分支结构</a></li>
<li><a href="#32-%E5%BC%95%E7%94%A8%E5%88%86%E7%BB%84">引用分组</a></li>
<li><a href="#33-%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8">反向引用</a></li>
<li><a href="#4-%E9%9D%9E%E6%8D%95%E8%8E%B7%E5%88%86%E7%BB%84">非捕获分组</a></li>
<li><a href="#35-%E7%9B%B8%E5%85%B3%E6%A1%88%E4%BE%8B">相关案例</a></li>
</ol>
<h2 id="31-分组和分支结构">3.1 分组和分支结构</h2>
<p>这二者是括号最直觉的作用，也是最原始的功能。</p>
<h3 id="311-分组">3.1.1 分组</h3>
<p>我们知道 <code>/a+/</code> 匹配连续出现的 &quot;a&quot;，而要匹配连续出现的 &quot;ab&quot; 时，需要使用 <code>/(ab)+/</code>。</p>
<p>其中括号是提供分组功能，使量词 <code>+</code> 作用于 &quot;ab&quot; 这个整体，测试如下：</p>
<pre><code class="language-javascript">const regex = /(ab)+/g;
const string = 'ababa abbb ababab';
console.log(string.match(regex)); 
// =&gt; [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]
</code></pre>
<h3 id="312-分支结构">3.1.2 分支结构</h3>
<p>而在多选分支结构 <code>(p1|p2)</code> 中，此处括号的作用也是不言而喻的，提供了子表达式的所有可能。</p>
<p>比如，要匹配如下的字符串：</p>
<pre><code>I love JavaScript
I love Regular Expression
</code></pre>
<p>可以使用正则：</p>
<pre><code class="language-javascript">const regex = /^I love (JavaScript|Regular Expression)$/;
console.log(regex.test('I love JavaScript'));
console.log(regex.test('I love Regular Expression'));
// =&gt; true
// =&gt; true
</code></pre>
<p>如果去掉正则中的括号，即 <code>/^I love JavaScript|Regular Expression$/</code>，匹配字符串是 &quot;I love JavaScript&quot; 和 &quot;Regular Expression&quot;，当然这不是我们想要的。</p>
<h2 id="32-引用分组">3.2 引用分组</h2>
<p>这是括号一个重要的作用，有了它，我们就可以进行数据提取，以及更强大的替换操作。</p>
<p>而要使用它带来的好处，必须配合使用实现环境的 API。</p>
<p>以日期为例。假设格式是 yyyy-mm-dd 的，我们可以先写一个简单的正则：</p>
<pre><code class="language-javascript">const regex = /\d{4}-\d{2}-\d{2}/;
</code></pre>
<p>然后再修改成括号版的：</p>
<pre><code class="language-javascript">const regex = /(\d{4})-(\d{2})-(\d{2})/;
</code></pre>
<p>为什么要使用这个正则呢？</p>
<h3 id="321-提取数据">3.2.1 提取数据</h3>
<p>比如提取出年、月、日，可以这么做：</p>
<pre><code class="language-javascript">const regex = /(\d{4})-(\d{2})-(\d{2})/;
const string = '2017-06-12';
console.log(string.match(regex)); 
// =&gt; [&quot;2017-06-12&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;12&quot;, index: 0, input: &quot;2017-06-12&quot;]
</code></pre>
<p><code>match</code> 返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符 <code>g</code>，<code>match</code> 返回的数组格式是不一样的）。</p>
<p>另外也可以使用正则对象的 <code>exec</code> 方法：</p>
<pre><code class="language-javascript">const regex = /(\d{4})-(\d{2})-(\d{2})/;
const string = '2017-06-12';
console.log(regex.exec(string)); 
// =&gt; [&quot;2017-06-12&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;12&quot;, index: 0, input: &quot;2017-06-12&quot;]
</code></pre>
<p>同时，也可以使用构造函数的全局属性 <code>$1</code> 至 <code>$9</code> 来获取：</p>
<pre><code class="language-javascript">const regex = /(\d{4})-(\d{2})-(\d{2})/;
const string = '2017-06-12';
regex.test(string); // 正则操作即可，例如
//regex.exec(string);
//string.match(regex);
console.log(RegExp.$1); // &quot;2017&quot;
console.log(RegExp.$2); // &quot;06&quot;
console.log(RegExp.$3); // &quot;12&quot;
</code></pre>
<h3 id="322-替换数据">3.2.2 替换数据</h3>
<p>比如，想把 yyyy-mm-dd 格式，替换成 mm/dd/yyyy 怎么做？</p>
<pre><code class="language-javascript">const regex = /(\d{4})-(\d{2})-(\d{2})/;
const string = '2017-06-12';
const result = string.replace(regex, '$2/$3/$1');
console.log(result); 
// =&gt; &quot;06/12/2017&quot;
</code></pre>
<p>其中 <code>replace</code> 中的，第二个参数里用 <code>$1</code>、<code>$2</code>、<code>$3</code> 指代相应的分组。等价于如下的形式：</p>
<pre><code class="language-javascript">const regex = /(\d{4})-(\d{2})-(\d{2})/;
const string = '2017-06-12';
const result = string.replace(regex, function() {
	return RegExp.$2 + '/' + RegExp.$3 + '/' + RegExp.$1;
});
console.log(result); 
// =&gt; &quot;06/12/2017&quot;
</code></pre>
<p>也等价于：</p>
<pre><code class="language-javascript">const regex = /(\d{4})-(\d{2})-(\d{2})/;
const string = '2017-06-12';
const result = string.replace(regex, function(match, year, month, day) {
	return month + '/' + day + '/' + year;
});
console.log(result); 
// =&gt; &quot;06/12/2017&quot;
</code></pre>
<h2 id="33-反向引用">3.3 反向引用</h2>
<p>除了使用相应 API 来引用分组，也可以在正则本身里引用分组。但只能引用之前出现的分组，即反向引用。</p>
<p>还是以日期为例。</p>
<p>比如要写一个正则支持匹配如下三种格式：</p>
<pre><code>2016-06-12
2016/06/12
2016.06.12
</code></pre>
<p>最先可能想到的正则是：</p>
<pre><code class="language-javascript">const regex = /\d{4}(-|\/|\.)\d{2}(-|\/|\.)\d{2}/;
const string1 = '2017-06-12';
const string2 = '2017/06/12';
const string3 = '2017.06.12';
const string4 = '2016-06/12';
console.log(regex.test(string1)); // true
console.log(regex.test(string2)); // true
console.log(regex.test(string3)); // true
console.log(regex.test(string4)); // true
</code></pre>
<p>其中 <code>/</code> 和 <code>.</code> 需要转义。虽然匹配了要求的情况，但也匹配 &quot;2016-06/12&quot; 这样的数据。</p>
<p>假设我们想要求分割符前后一致怎么办？此时需要使用反向引用：</p>
<pre><code class="language-javascript">const regex = /\d{4}(-|\/|\.)\d{2}\1\d{2}/;
const string1 = '2017-06-12';
const string2 = '2017/06/12';
const string3 = '2017.06.12';
const string4 = '2016-06/12';
console.log(regex.test(string1)); // true
console.log(regex.test(string2)); // true
console.log(regex.test(string3)); // true
console.log(regex.test(string4)); // false
</code></pre>
<p>注意里面的 <code>\1</code>，表示的引用之前的那个分组 <code>(-|\/|\.)</code>。不管它匹配到什么（比如 -），<code>\1</code> 都匹配那个同样的具体某个字符。</p>
<p>我们知道了 <code>\1</code> 的含义后，那么 <code>\2</code> 和 <code>\3</code> 的概念也就理解了，即分别指代第二个和第三个分组。</p>
<p>看到这里，此时，恐怕你会有三个问题。</p>
<h3 id="331-括号嵌套怎么办">3.3.1 括号嵌套怎么办？</h3>
<p>以左括号（开括号）为准。比如：</p>
<pre><code class="language-javascript">const regex = /^((\d)(\d(\d)))\1\2\3\4$/;
const string = '1231231233';
console.log(regex.test(string)); // true
console.log(RegExp.$1);          // 123
console.log(RegExp.$2 );         // 1
console.log(RegExp.$3);          // 23
console.log(RegExp.$4);          // 3
</code></pre>
<p>我们可以看看这个正则匹配模式：</p>
<ul>
<li>第一个字符是数字，比如说 1，</li>
<li>第二个字符是数字，比如说 2，</li>
<li>第三个字符是数字，比如说 3，</li>
<li>接下来的是 <code>\1</code>，是第一个分组内容，那么看第一个开括号对应的分组是什么，是 123，</li>
<li>接下来的是 <code>\2</code>，找到第 2 个开括号，对应的分组，匹配的内容是 1，</li>
<li>接下来的是 <code>\3</code>，找到第 3 个开括号，对应的分组，匹配的内容是 23，</li>
<li>最后的是 <code>\4</code>，找到第 3 个开括号，对应的分组，匹配的内容是 3。</li>
</ul>
<p>这个问题，估计仔细看一下，就该明白了。</p>
<h3 id="332-10-表示什么呢">3.3.2 <code>\10</code> 表示什么呢？</h3>
<p>另外一个疑问可能是，即 <code>\10</code> 是表示第 10 个分组，还是 <code>\1</code> 和 0 呢？</p>
<p>答案是前者，虽然一个正则里出现 <code>\10</code> 比较罕见。测试如下：</p>
<pre><code class="language-javascript">const regex = /(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \10+/;
const string = '123456789# ######';
console.log(regex.test(string));
// =&gt; true
</code></pre>
<h3 id="333-引用不存在的分组会怎样">3.3.3 引用不存在的分组会怎样？</h3>
<p>因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如 <code>\2</code>，就匹配“\2”。注意“\2”表示对“2”进行了转意。</p>
<pre><code class="language-javascript">const regex = /\1\2\3\4\5\6\7\8\9/;
console.log(regex.test('\1\2\3\4\5\6\7\8\9'));
console.log('\1\2\3\4\5\6\7\8\9'.split(''));
</code></pre>
<p>Chrome 浏览器打印的结果：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586191214181.png" alt="" loading="lazy"></p>
<p>Node 打印的结果：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586193026779.png" alt="" loading="lazy"></p>
<h2 id="4-非捕获分组">4.  非捕获分组</h2>
<p>之前文中出现的分组，都会捕获它们匹配到的数据，以便后续引用，因此也称他们是捕获型分组。</p>
<p>如果只想要括号最原始的功能，但不会引用它，即，既不在 API 里引用，也不在正则里反向引用。此时可以使用非捕获分组 <code>(?:p)</code>，例如本文第一个例子可以修改为：</p>
<pre><code class="language-javascript">const regex = /(?:ab)+/g;
const string = 'ababa abbb ababab';
console.log(string.match(regex)); 
// =&gt; [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]
</code></pre>
<h2 id="35-相关案例">3.5 相关案例</h2>
<p>至此括号的作用已经讲完了，总结一句话，就是提供了可供我们使用的分组，如何用就看我们的了。</p>
<h3 id="351-字符串-trim-方法模拟">3.5.1 字符串 <code>trim</code> 方法模拟</h3>
<p><code>trim</code> 方法是去掉字符串的开头和结尾的空白符。有两种思路去做。</p>
<p>第一种，匹配到开头和结尾的空白符，然后替换成空字符。如：</p>
<pre><code class="language-javascript">function trim(str) {
	return str.replace(/^\s+|\s+$/g, '');
}
console.log(trim('  foobar   ')); 
// =&gt; &quot;foobar&quot;
</code></pre>
<p>第二种，匹配整个字符串，然后用引用来提取出相应的数据：</p>
<pre><code class="language-javascript">function trim(str) {
	return str.replace(/^\s*(.*?)\s*$/g, '$1');
}
console.log(trim('  foobar  ')); 
// =&gt; &quot;foobar&quot;
</code></pre>
<p>这里使用了惰性匹配 <code>*?</code>，不然也会匹配最后一个空格之前的所有空格的。</p>
<p>当然，前者效率高。</p>
<h3 id="352-将每个单词的首字母转换为大写">3.5.2 将每个单词的首字母转换为大写</h3>
<pre><code class="language-javascript">function titleize(str) {
	return str.toLowerCase().replace(/(?:^|\s)\w/g, function(c) {
		return c.toUpperCase();
	});
}
console.log(titleize('my name is epeli')); 
// =&gt; &quot;My Name Is Epeli&quot;
</code></pre>
<p>思路是找到每个单词的首字母，当然这里不使用非捕获匹配也是可以的。</p>
<h3 id="353-驼峰化">3.5.3 驼峰化</h3>
<pre><code class="language-javascript">function camelize(str) {
	return str.replace(/[-_\s]+(.)?/g, function(match, c) {
		return c ? c.toUpperCase() : '';
	});
}
console.log(camelize('-moz-transform')); 
// =&gt; &quot;MozTransform&quot;
</code></pre>
<p>其中分组 <code>(.)</code> 表示首字母。单词的界定是，前面的字符可以是多个连字符、下划线以及空白符。正则后面的 <code>?</code> 的目的，是为了应对 <code>str</code> 尾部的字符可能不是单词字符，比如 <code>str</code> 是'-moz-transform'。</p>
<h3 id="354-中划线化">3.5.4 中划线化</h3>
<pre><code class="language-javascript">function dasherize(str) {
	return str.replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
}
console.log(dasherize('MozTransform')); 
// =&gt; &quot;-moz-transform&quot;
</code></pre>
<p>驼峰化的逆过程。</p>
<h3 id="355-html-转义和反转义">3.5.5 html 转义和反转义</h3>
<pre><code class="language-javascript">// 将HTML特殊字符转换成等值的实体
function escapeHTML(str) {
	var escapeChars = {
	  '¢' : 'cent',
	  '£' : 'pound',
	  '¥' : 'yen',
	  '€': 'euro',
	  '©' :'copy',
	  '®' : 'reg',
	  '&lt;' : 'lt',
	  '&gt;' : 'gt',
	  '&quot;' : 'quot',
	  '&amp;' : 'amp',
	  '\'' : '#39'
	};
	return str.replace(new RegExp('[' + Object.keys(escapeChars).join('') +']', 'g'), function(match) {
		return '&amp;' + escapeChars[match] + ';';
	});
}
console.log(escapeHTML('&lt;div&gt;Blah blah blah&lt;/div&gt;'));
// =&gt; &quot;&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt&quot;;
</code></pre>
<p>其中使用了用构造函数生成的正则，然后替换相应的格式就行了，这个跟本章没多大关系。</p>
<p>倒是它的逆过程，使用了括号，以便提供引用，也很简单，如下：</p>
<pre><code class="language-javascript">// 实体字符转换为等值的HTML。
function unescapeHTML(str) {
	var htmlEntities = {
	  nbsp: ' ',
	  cent: '¢',
	  pound: '£',
	  yen: '¥',
	  euro: '€',
	  copy: '©',
	  reg: '®',
	  lt: '&lt;',
	  gt: '&gt;',
	  quot: '&quot;',
	  amp: '&amp;',
	  apos: '\''
	};
	return str.replace(/\&amp;([^;]+);/g, function(match, key) {
		if (key in htmlEntities) {
			return htmlEntities[key];
		}
		return match;
	});
}
console.log(unescapeHTML('&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;'));
// =&gt; &quot;&lt;div&gt;Blah blah blah&lt;/div&gt;&quot;
</code></pre>
<p>通过 <code>key</code> 获取相应的分组引用，然后作为对象的键。</p>
<h3 id="356-匹配成对标签">3.5.6 匹配成对标签</h3>
<p>要求匹配：</p>
<pre><code class="language-html">&lt;title&gt;regular expression&lt;/title&gt;
&lt;p&gt;laoyao bye bye&lt;/p&gt;
</code></pre>
<p>不匹配：</p>
<pre><code class="language-html">&lt;title&gt;wrong!&lt;/p&gt;
</code></pre>
<p>匹配一个开标签，可以使用正则 <code>&lt;[^&gt;]+&gt;</code>，</p>
<p>匹配一个闭标签，可以使用 <code>&lt;\/[^&gt;]+&gt;</code>，</p>
<p>但是要求匹配成对标签，那就需要使用反向引用，如：</p>
<pre><code class="language-javascript">const regex = /&lt;([^&gt;]+)&gt;[\d\D]*&lt;\/\1&gt;/;
const string1 = '&lt;title&gt;regular expression&lt;/title&gt;';
const string2 = '&lt;p&gt;laoyao bye bye&lt;/p&gt;';
const string3 = '&lt;title&gt;wrong!&lt;/p&gt;';
console.log(regex.test(string1)); // true
console.log(regex.test(string2)); // true
console.log(regex.test(string3)); // false
</code></pre>
<p>其中开标签 <code>&lt;[^&gt;]+&gt;</code> 改成 <code>&lt;([^&gt;]+)&gt;</code>，使用括号的目的是为了后面使用反向引用，而提供分组。闭标签使用了反向引用，<code>&lt;\/\1&gt;</code>。</p>
<p>另外 <code>[\d\D]</code> 的意思是，这个字符是数字或者不是数字，因此，也就是匹配任意字符的意思。</p>
<h2 id="第-3-章小结">第 3 章小结</h2>
<p>正则中使用括号的例子那可是太多了，不一而足。</p>
<p>重点理解括号可以提供分组，我们可以提取数据，应该就可以了。</p>
<p>例子中的代码，基本没做多少分析，相信你都能看懂的。</p>
<h1 id="第-4-章-正则表达式回溯法原理">第 4 章 正则表达式回溯法原理</h1>
<p>学习正则表达式，是需要懂点儿匹配原理的。</p>
<p>而研究匹配原理时，有两个字出现的频率比较高：“回溯”。</p>
<p>听起来挺高大上，确实还有很多人对此不明不白的。</p>
<p>因此，本章就简单扼要地说清楚回溯到底是什么东西。</p>
<p>内容包括：</p>
<ol>
<li><a href="#41-%E6%B2%A1%E6%9C%89%E5%9B%9E%E6%BA%AF%E7%9A%84%E5%8C%B9%E9%85%8D">没有回溯的匹配</a></li>
<li><a href="#42-%E6%9C%89%E5%9B%9E%E6%BA%AF%E7%9A%84%E5%8C%B9%E9%85%8D">有回溯的匹配</a></li>
<li><a href="#43-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%9E%E6%BA%AF%E5%BD%A2%E5%BC%8F">常见的回溯形式</a></li>
</ol>
<h2 id="41-没有回溯的匹配">4.1 没有回溯的匹配</h2>
<p>假设我们的正则是 <code>/ab{1,3}c/</code>，其可视化形式是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586228004235.png" alt="" loading="lazy"></p>
<p>而当目标字符串是 &quot;abbbc&quot; 时，就没有所谓的“回溯”。其匹配过程是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586228091801.png" alt="" loading="lazy"></p>
<p>其中子表达式 <code>b{1,3}</code> 表示 &quot;b&quot;字符连续出现 1 到 3 次。</p>
<h2 id="42-有回溯的匹配">4.2 有回溯的匹配</h2>
<p>如果目标字符串是 &quot;abbc&quot;，中间就有回溯。<br>
<img src="https://tdmaker.github.io/faded//post-images/1586228577838.png" alt="" loading="lazy"></p>
<p>图中第 5 步有红颜色，表示匹配不成功。此时 <code>b{1,3}</code> 已经匹配到了 2 个字符 &quot;b&quot;，准备尝试第三个时，结果发现接下来的字符是 &quot;c&quot;。那么就认为 <code>b{1,3}</code> 就已经匹配完毕。然后状态又回到之前的状态（即第 6 步，与第 4 步一样），最后再用子表达式 <code>c</code>，去匹配字符 &quot;c&quot;。当然，此时整个表达式匹配成功了。</p>
<p>图中的第 6 步，就是“回溯”。</p>
<p>你可能对此没有感觉，这里我们再举一个例子。正则是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586228741421.png" alt="" loading="lazy"></p>
<p>目标字符串是 &quot;abbbc&quot;，匹配过程是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586229355903.png" alt="" loading="lazy"></p>
<p>其中第 7 步和第 10 步是回溯。第 7 步与第 4 步一样，此时 <code>b{1,3}</code> 匹配了两个 &quot;b&quot;，而第 10 步与第 3 步一样，此时 <code>b{1,3}</code> 只匹配了一个 &quot;b&quot;，这也是 <code>b{1,3}</code> 的最终匹配结果。</p>
<p>这里再看一个清晰的回溯，正则是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586229516697.png" alt="" loading="lazy"></p>
<p>目标字符串是：&quot;acd&quot;ef，匹配过程是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586229595451.png" alt="" loading="lazy"></p>
<p>图中省略了尝试匹配双引号失败的过程。可以看出 <code>.*</code> 是非常影响效率的。</p>
<p>为了减少一些不必要的回溯，可以把正则修改为 <code>/&quot;[^&quot;]*&quot;/</code>。</p>
<h2 id="43-常见的回溯形式">4.3 常见的回溯形式</h2>
<p>正则表达式匹配字符串的这种方式，有个学名，叫回溯法。</p>
<p>回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。（来自<a href="https://baike.baidu.com/item/%E5%9B%9E%E6%BA%AF%E6%B3%95">百度百科</a>）。</p>
<p>本质上就是深度优先搜索算法。<strong>其中退到之前的某一步这一过程</strong>，我们称为“回溯”。从上面的描述过程中，可以看出，路走不通时，就会发生“回溯”。即，<strong>尝试匹配失败时，接下来的一步通常就是回溯</strong>。</p>
<p>道理，我们是懂了。那么 JS 中正则表达式会产生回溯的地方都有哪些呢？</p>
<h3 id="431-贪婪量词">4.3.1 贪婪量词</h3>
<p>之前的例子都是贪婪量词相关的。比如 <code>b{1,3}</code>，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝试。首先会尝试 &quot;bbb&quot;，然后再看整个正则是否能匹配。不能匹配时，吐出一个 &quot;b&quot;，即在 &quot;bb&quot; 的基础上，再继续尝试。如果还不行，再吐出一个，再试。如果还不行呢？只能说明匹配失败了。</p>
<p>虽然局部匹配是贪婪的，但也要满足整体能正确匹配。否则，皮之不存，毛将焉附？</p>
<p>此时我们不禁会问，如果当多个贪婪量词挨着存在，并相互有冲突时，此时会是怎样？</p>
<p>答案是，先下手为强！因为深度优先搜索。测试如下：</p>
<pre><code class="language-javascript">const string = '12345';
const regex = /(\d{1,3})(\d{1,3})/;
console.log(string.match(regex));
// =&gt; [&quot;12345&quot;, &quot;123&quot;, &quot;45&quot;, index: 0, input: &quot;12345&quot;]
</code></pre>
<p>其中，前面的 <code>\d{1,3}</code> 匹配的是 &quot;123&quot;，后面的 <code>\d{1,3}</code> 匹配的是 &quot;45&quot;。</p>
<h3 id="432-惰性量词">4.3.2 惰性量词</h3>
<p>惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配，比如：</p>
<pre><code class="language-javascript">const string = '12345';
const regex = /(\d{1,3}?)(\d{1,3})/;
console.log(string.match(regex));
// =&gt; [&quot;1234&quot;, &quot;1&quot;, &quot;234&quot;, index: 0, input: &quot;12345&quot;]
</code></pre>
<p>其中 <code>\d{1,3}?</code> 只匹配到一个字符 &quot;1&quot;，而后面的 <code>\d{1,3}</code> 匹配了 &quot;234&quot;。</p>
<p>虽然惰性量词不贪，但也会有回溯的现象。比如正则是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586230497408.png" alt="" loading="lazy"></p>
<p>目标字符串是 &quot;12345&quot;，匹配过程是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586230544649.png" alt="" loading="lazy"></p>
<p>知道你不贪、很知足，但是为了整体匹配成，没办法，也只能给你多塞点了。因此最后 <code>\d{1,3}?</code> 匹配的字符是 &quot;12&quot;，是两个数字，而不是一个。</p>
<h3 id="433-分支结构">4.3.3 分支结构</h3>
<p>我们知道分支也是惰性的，比如/can|candy/，去匹配字符串&quot;candy&quot;，得到的结果是&quot;can&quot;，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。</p>
<p>分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。</p>
<p>比如正则：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586230628482.png" alt="" loading="lazy"></p>
<p>目标字符串是 &quot;candy&quot;，匹配过程：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586230657015.png" alt="" loading="lazy"></p>
<p>上面第 5 步，虽然没有回到之前的状态，但仍然回到了分支结构，尝试下一种可能。所以，可以认为它是一种回溯的。</p>
<h2 id="第-4-章小结">第 4 章小结</h2>
<p>其实回溯法，很容易掌握的。</p>
<p>简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了；要么最后都试完后，发现整体匹配不成功。</p>
<ol>
<li>贪婪量词“试”的策略是：买衣服砍价。价钱太高了，便宜点，不行，再便宜点。</li>
<li>惰性量词“试”的策略是：卖东西加价。给少了，再多给点行不，还有点少啊，再给点。</li>
<li>分支结构“试”的策略是：货比三家。这家不行，换一家吧，还不行，再换。</li>
</ol>
<p>既然有回溯的过程，那么匹配效率肯定低一些。相对谁呢？相对那些 DFA 引擎。</p>
<p>而 JS 的正则引擎是 NFA，NFA 是“非确定型有限自动机”的简写。</p>
<p>大部分语言中的正则都是 NFA，为啥它这么流行呢？</p>
<p>答：你别看我匹配慢，但是我编译快啊，而且我还有趣哦。</p>
<h1 id="第-5-章-正则表达式的拆分">第 5 章 正则表达式的拆分</h1>
<p>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p>
<p>不仅要求自己能解决问题，还要看懂别人的解决方案。代码是这样，正则表达式也是这样。</p>
<p>正则这门语言跟其他语言有一点不同，它通常就是一大堆字符，而没有所谓“语句”的概念。</p>
<p>如何能正确地把一大串正则拆分成一块一块的，成为了破解“天书”的关键。</p>
<p>本章就解决这一问题，内容包括：</p>
<ol>
<li><a href="#51-%E7%BB%93%E6%9E%84%E5%92%8C%E6%93%8D%E4%BD%9C%E7%AC%A6">结构和操作符</a></li>
<li><a href="#52-%E6%B3%A8%E6%84%8F%E8%A6%81%E7%82%B9">注意要点</a></li>
<li><a href="#53-%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90">案例分析</a></li>
</ol>
<h2 id="51-结构和操作符">5.1 结构和操作符</h2>
<p>编程语言一般都有操作符。只要有操作符，就会出现一个问题。当一大堆操作在一起时，先操作谁，又后操作谁呢？为了不产生歧义，就需要语言本身定义好操作顺序，即所谓的优先级。</p>
<p>而在正则表达式中，操作符都体现在结构中，即由特殊字符和普通字符所代表的一个个特殊整体。</p>
<p>JS 正则表达式中，都有哪些结构呢？</p>
<ul>
<li><strong>字符字面量</strong>，匹配一个具体字符，包括不用转义的和需要转义的。比如 <code>a</code> 匹配字符 &quot;a&quot;，又比如 <code>\n</code> 匹配换行符，又比如 <code>\.</code> 匹配小数点。</li>
<li><strong>字符组</strong>，匹配一个字符，可以是多种可能之一，比如 <code>[0-9]</code>，表示匹配一个数字。也有 <code>\d</code> 的简写形式。另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如 <code>[^0-9]</code>，表示一个非数字字符，也有 <code>\D</code>的简写形式。</li>
<li><strong>量词</strong>，表示一个字符连续出现，比如 <code>a{1,3}</code>表示 &quot;a&quot; 字符连续出现 3 次。另外还有常见的简写形式，比如 <code>a+</code> 表示 &quot;a&quot; 字符连续出现至少一次。</li>
<li><strong>锚字符</strong>，匹配一个位置，而不是字符。比如 <code>^</code> 匹配字符串的开头，又比如 <code>\b</code> 匹配单词边界，又比如 <code>(?=\d)</code> 表示数字前面的位置。</li>
<li><strong>分组</strong>，用括号表示一个整体，比如 <code>(ab)+</code>，表示 &quot;ab&quot; 两个字符连续出现多次，也可以使用非捕获分组 <code>(?:ab)+</code>。</li>
<li><strong>选择分支</strong>，多个子表达式多选一，比如 <code>abc|bcd</code>，表达式匹配 &quot;abc&quot; 或者 &quot;bcd&quot; 字符子串。</li>
<li><strong>反向引用</strong>，比如 <code>\2</code>，表示引用第 2 个分组。</li>
</ul>
<p>其中涉及到的操作符有：</p>
<ol>
<li>转义符 <code>\</code></li>
<li>括号和方括号 <code>(...)</code>、<code>(?:...)</code>、<code>(?=...)</code>、<code>(?!...)</code>、<code>[...]</code></li>
<li>量词限定符 <code>{m}</code>、<code>{m,n}</code>、<code>{m,}</code>、<code>?</code>、<code>*</code>、<code>+</code></li>
<li>位置和序列 <code>^</code>、<code>$</code>、<code>\</code> 元字符、 一般字符</li>
<li>管道符（竖杠）<code>|</code></li>
</ol>
<p>上面操作符的优先级从上至下，由高到低。这里，我们来分析一个正则：<code>/ab?(c|de*)+|fg/</code>：</p>
<ol>
<li>由于括号的存在，所以，<code>(c|de*)</code> 是一个整体结构。</li>
<li>在 <code>(c|de*)</code> 中，注意其中的量词 <code>*</code>，因此 <code>e*</code> 是一个整体结构。</li>
<li>又因为分支结构 <code>|</code> 优先级最低，因此 <code>c</code> 是一个整体、而 <code>de*</code> 是另一个整体。</li>
<li>同理，整个正则分成了 <code>a</code>、<code>b?</code>、<code>(...)+</code>、<code>f</code>、<code>g</code>。而由于分支的原因，又可以分成 <code>ab?(c|de*)+</code> 和 <code>fg</code> 这两部分。</li>
</ol>
<p>希望你没被我绕晕，上面的分析可用其<a href="https://jex.im/regulex/#!flags=&amp;re=ab%3F(c%7Cde*)%2B%7Cfg">可视化形式</a>描述如下：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586235279309.png" alt="" loading="lazy"></p>
<h2 id="52-注意要点">5.2 注意要点</h2>
<p>关于结构和操作符，还是有几点需要强调：</p>
<p>2.1 匹配字符串整体问题</p>
<p>因为是要匹配整个字符串，我们经常会在正则前后中加上锚字符 <code>^</code> 和 <code>$</code>。</p>
<p>比如要匹配目标字符串 &quot;abc&quot; 或者 &quot;bcd&quot; 时，如果一不小心，就会写成 <code>/^abc|bcd$/</code>。</p>
<p>而位置字符和字符序列优先级要比竖杠高，故其匹配的结构是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586235908192.png" alt="" loading="lazy"></p>
<p>应该修改成：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586235984436.png" alt="" loading="lazy"></p>
<h3 id="522-量词连缀问题">5.2.2 量词连缀问题</h3>
<p>假设，要匹配这样的字符串：</p>
<ol>
<li>每个字符为a、b、c任选其一；</li>
<li>字符串的长度是 3 的倍数。</li>
</ol>
<p>此时正则不能想当然地写成 <code>/^[abc]{3}+$/</code>，这样会报错，说 <code>+</code> 前面没什么可重复的：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586236262871.png" alt="" loading="lazy"></p>
<p>此时要修改成：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586236351556.png" alt="" loading="lazy"></p>
<h3 id="523-元字符转义问题">5.2.3 元字符转义问题</h3>
<p>所谓元字符，就是正则中有特殊含义的字符。</p>
<p>所有结构里，用到的元字符总结如下：<code>^ $ . * + ? | \ / ( ) [ ] { } = ! : - ,</code>。</p>
<p>当匹配上面的字符本身时，可以一律转义：</p>
<pre><code class="language-javascript">const string = '^$.*+?|\\/[]{}=!:-,';
const regex = /\^\$\.\*\+\?\|\\\/\[\]\{\}\=\!\:\-\,/;
console.log(regex.test(string)); 
// =&gt; true
</code></pre>
<p>其中 string 中的 <code>\</code> 字符也要转义的。</p>
<p>另外，在 string 中，也可以把每个字符转义，当然，转义后的结果仍是本身：</p>
<pre><code class="language-javascript">const string = '^$.*+?|\\/[]{}=!:-,';
const string2 = '\^\$\.\*\+\?\|\\\/\[\]\{\}\=\!\:\-\,';
console.log(string == string2); 
// =&gt; true
</code></pre>
<p>现在的问题是，是不是每个字符都需要转义呢？否，看情况。</p>
<h4 id="5231-字符组中的元字符">5.2.3.1 字符组中的元字符</h4>
<p>跟字符组相关的元字符有 <code>[]</code>、<code>^</code>、<code>-</code>。因此在会引起歧义的地方进行转义。例如开头的 <code>^</code> 必须转义，不然会把整个字符组，看成反义字符组。</p>
<pre><code class="language-javascript">const string = '^$.*+?|\\/[]{}=!:-,';
const regex = /[\^$.*+?|\\/\[\]{}=!:\-,]/g;
console.log(string.match(regex));
// =&gt; [&quot;^&quot;, &quot;$&quot;, &quot;.&quot;, &quot;*&quot;, &quot;+&quot;, &quot;?&quot;, &quot;|&quot;, &quot;\&quot;, &quot;/&quot;, &quot;[&quot;, &quot;]&quot;, &quot;{&quot;, &quot;}&quot;, &quot;=&quot;, &quot;!&quot;, &quot;:&quot;, &quot;-&quot;, &quot;,&quot;]
</code></pre>
<h4 id="5232-匹配-abc-和-35">5.2.3.2 匹配 &quot;[abc]&quot; 和 &quot;{3,5}&quot;</h4>
<p>我们知道 <code>[abc]</code>，是个字符组。如果要匹配字符串 &quot;[abc]&quot; 时，该怎么办？</p>
<p>可以写成 <code>/\[abc\]/</code>，也可以写成 <code>/\[abc]/</code>，测试如下：</p>
<pre><code class="language-javascript">const string = '[abc]';
const regex = /\[abc]/g;
console.log(string.match(regex)[0]); 
// =&gt; &quot;[abc]&quot;
</code></pre>
<p>只需要在第一个方括号转义即可，因为后面的方括号构不成字符组，正则不会引发歧义，自然不需要转义。</p>
<p>同理，要匹配字符串 &quot;{3,5}&quot;，只需要把正则写成 <code>/\{3,5}/</code> 即可。</p>
<p>另外，我们知道量词有简写形式 <code>{m,}</code>，却没有 <code>{,n}</code> 的情况。虽然后者不构成量词的形式，但此时并不会报错。当然，匹配的字符串也是 &quot;{,n}&quot;，测试如下：</p>
<pre><code class="language-javascript">const string = '{,3}';
const regex = /{,3}/g;
console.log(string.match(regex)[0]); 
// =&gt; &quot;{,3}&quot;
</code></pre>
<h4 id="5233-其余情况">5.2.3.3 其余情况</h4>
<p>比如 <code>= ! : - ,</code> 等符号，只要不在特殊结构中，也不需要转义。</p>
<p>但是，括号需要前后都转义的，如 <code>/\(123\)/</code>。</p>
<p>至于剩下的 <code>^ $ . * + ? | \ /</code> 等字符，只要不在字符组内，都需要转义的。</p>
<h2 id="53-案例分析">5.3 案例分析</h2>
<p>接下来分析两个例子，一个简单的，一个复杂的。</p>
<h3 id="531-身份证">5.3.1 身份证</h3>
<p>正则表达式是：<code>/^(\d{15}|\d{17}[\dxX])$/</code>，因为竖杠 <code>|</code> 的优先级最低，所以正则分成了两部分 <code>\d{15}</code> 和 <code>\d{17}[\dxX]</code>。</p>
<ul>
<li><code>\d{15}</code> 表示 15 位连续数字。</li>
<li><code>\d{17}[\dxX]</code> 表示 <code>17</code> 位连续数字，最后一位可以是数字可以大小写字母 &quot;x&quot;。</li>
</ul>
<p>可视化如下：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586239471813.png" alt="" loading="lazy"></p>
<h3 id="532-ipv4-地址">5.3.2 IPv4 地址</h3>
<p>正则表达式是：<br>
<code>/^((0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])$/</code></p>
<p>这个正则，看起来非常吓人。但是熟悉优先级后，会立马得出如下的结构：<br>
<code>((...)\.){3}(...)</code><br>
上面的两个 <code>(...)</code> 是一样的结构。表示匹配的是 3 位数字。因此整个结构是：</p>
<pre><code>3位数.3位数.3位数.3位数
</code></pre>
<p>然后再来分析 <code>(...)</code>：<br>
<code>(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])</code></p>
<p>它是一个多选结构，分成 5 个部分：</p>
<ul>
<li><code>0{0,2}\d</code>，匹配一位数，包括 0 补齐的。比如 9、09、009；</li>
<li><code>0?\d{2}</code>，匹配两位数，包括 0 补齐的，也包括一位数；</li>
<li><code>1\d{2}</code>，匹配 100 到 199;</li>
<li><code>2[0-4]\d</code>，匹配 200-249；</li>
<li><code>25[0-5]</code>，匹配 250-255。</li>
</ul>
<p>最后来看一下其可视化形式：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586240278420.png" alt="" loading="lazy"></p>
<h2 id="第-5-章小结">第 5 章小结</h2>
<p>掌握正则表达式中的优先级后，再看任何正则应该都有信心分析下去了。</p>
<p>至于例子，不一而足，没有写太多。</p>
<p>这里稍微总结一下，竖杠的优先级最低，即最后运算。</p>
<p>只要知道这一点，就能读懂大部分正则。</p>
<p>另外关于元字符转义问题，当自己不确定与否时，尽管去转义，总之是不会错的。</p>
<h1 id="第-6-章-正则表达式的构建">第 6 章 正则表达式的构建</h1>
<p>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p>
<p>不仅要看懂别人的解决方案，也要能独立地解决问题。代码是这样，正则表达式也是这样。</p>
<p>与“读”相比，“写”往往更为重要，这个道理是不言而喻的。</p>
<p>对正则的运用，首重就是：如何针对问题，构建一个合适的正则表达式？</p>
<p>本章就解决该问题，内容包括：</p>
<ol>
<li><a href="#61-%E5%B9%B3%E8%A1%A1%E6%B3%95%E5%88%99">平衡法则</a></li>
<li><a href="#62-%E6%9E%84%E5%BB%BA%E6%AD%A3%E5%88%99%E5%89%8D%E6%8F%90">构建正则前提</a></li>
<li><a href="#63-%E5%87%86%E7%A1%AE%E6%80%A7">准确性</a></li>
<li><a href="">效率</a></li>
</ol>
<h2 id="61-平衡法则">6.1 平衡法则</h2>
<p>构建正则有一点非常重要，需要做到下面几点的平衡：</p>
<ol>
<li>匹配预期的字符串</li>
<li>不匹配非预期的字符串</li>
<li>可读性和可维护性</li>
<li>效率</li>
</ol>
<h2 id="62-构建正则前提">6.2 构建正则前提</h2>
<h3 id="621-是否能使用正则">6.2.1 是否能使用正则</h3>
<p>正则太强大了，以至于我们随便遇到一个操作字符串问题时，都会下意识地去想，用正则该怎么做。但我们始终要提醒自己，正则虽然强大，但不是万能的，很多看似很简单的事情，还是做不到的。</p>
<p>比如匹配这样的字符串：1010010001....</p>
<p>虽然很有规律，但是只靠正则就是无能为力。</p>
<h3 id="622-是否有必要使用正则">6.2.2 是否有必要使用正则</h3>
<p>要认识到正则的局限，不要去研究根本无法完成的任务。同时，也不能走入另一个极端：无所不用正则。能用字符串API解决的简单问题，就不该正则出马。</p>
<ul>
<li>比如，从日期中提取出年月日，虽然可以使用正则：</li>
</ul>
<pre><code class="language-javascript">const string = '2017-07-01';
const regex = /^(\d{4})-(\d{2})-(\d{2})/;
console.log(string.match(regex));
// =&gt; [&quot;2017-07-01&quot;, &quot;2017&quot;, &quot;07&quot;, &quot;01&quot;, index: 0, input: &quot;2017-07-01&quot;]
</code></pre>
<p>其实，可以使用字符串的 <code>split</code> 方法来做，即可：</p>
<pre><code class="language-javascript">const string = '2017-07-01';
const result = string.split('-');
console.log(result);
// =&gt; [&quot;2017&quot;, &quot;07&quot;, &quot;01&quot;]
</code></pre>
<ul>
<li>比如，判断是否有问号，虽然可以使用：</li>
</ul>
<pre><code class="language-javascript">const string = '?id=xx&amp;act=search';
console.log(string.search(/\?/));
// =&gt; 0
</code></pre>
<p>其实，可以使用字符串的 <code>indexOf</code> 方法：</p>
<pre><code class="language-javascript">const string = '?id=xx&amp;act=search';
console.log(string.indexOf('?'));
// =&gt; 0
</code></pre>
<ul>
<li>比如获取子串，虽然可以使用正则：</li>
</ul>
<pre><code class="language-javascript">const string = 'JavaScript';
console.log(string.match(/.{4}(.+)/)[1]);
// =&gt; Script
</code></pre>
<p>其实，可以直接使用字符串的 <code>substring</code> 或 <code>substr</code> 方法来做：</p>
<pre><code class="language-javascript">const string = 'JavaScript';
console.log(string.substring(4));
// =&gt; Script
</code></pre>
<h3 id="623-是否有必要构建一个复杂的正则">6.2.3 是否有必要构建一个复杂的正则</h3>
<p>比如密码匹配问题，要求密码长度 6-12 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符。</p>
<p>在第 2 章里，我们写出了正则是：<code>/(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/</code><br>
其实可以使用多个小正则来做：</p>
<pre><code class="language-javascript">const regex1 = /^[0-9A-Za-z]{6,12}$/;
const regex2 = /^[0-9]{6,12}$/;
const regex3 = /^[A-Z]{6,12}$/;
const regex4 = /^[a-z]{6,12}$/;
function checkPassword(string) {
	if (!regex1.test(string)) return false;
	if ( regex2.test(string)) return false;
	if ( regex3.test(string)) return false;
	if ( regex4.test(string)) return false;
	return true;
}
</code></pre>
<h2 id="63-准确性">6.3. 准确性</h2>
<p>所谓准确性，就是能匹配预期的目标，并且不匹配非预期的目标。</p>
<p>这里提到了“预期”二字，那么我们就需要知道目标的组成规则。</p>
<p>不然没法界定什么样的目标字符串是符合预期的，什么样的又不是符合预期的。</p>
<p>下面将举例说明，当目标字符串构成比较复杂时，该如何构建正则，并考虑到哪些平衡。</p>
<h3 id="631-匹配固定电话">6.3.1 匹配固定电话</h3>
<p>比如要匹配如下格式的固定电话号码：</p>
<pre><code>055188888888
0551-88888888
(0551)88888888
</code></pre>
<p>第一步，了解各部分的模式规则。</p>
<p>上面的电话，总体上分为区号和号码两部分（不考虑分机号和 +86 的情形）。</p>
<p>区号是 0 开头的 3 到 4 位数字，对应的正则是：<code>0\d{2,3}</code></p>
<p>号码是非 0 开头的 7 到 8 位数字，对应的正则是：<code>[1-9]\d{6,7}</code></p>
<p>因此，匹配 055188888888 的正则是：<code>/^0\d{2,3}[1-9]\d{6,7}$/</code></p>
<p>匹配 0551-88888888 的正则是：<code>/^0\d{2,3}-[1-9]\d{6,7}$/</code></p>
<p>匹配 (0551)88888888 的正则是：<code>/^\(0\d{2,3}\)[1-9]\d{6,7}$/</code></p>
<p>第二步，明确形式关系。</p>
<p>这三者情形是或的关系，可以构建分支：</p>
<p><code>/^0\d{2,3}[1-9]\d{6,7}$|^0\d{2,3}-[1-9]\d{6,7}$|^\(0\d{2,3}\)[1-9]\d{6,7}$/</code></p>
<p>提取公共部分：</p>
<p><code>/^(0\d{2,3}|0\d{2,3}-|\(0\d{2,3}\))[1-9]\d{6,7}$/</code></p>
<p>进一步简写：</p>
<p><code>/^(0\d{2,3}-?|\(0\d{2,3}\))[1-9]\d{6,7}$/</code></p>
<p>其可视化形式：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586242345181.png" alt="" loading="lazy"></p>
<p>上面的正则构建过程略显罗嗦，但是这样做，能保证正则是准确的。</p>
<p>上述三种情形是或的关系，这一点很重要，不然很容易按字符是否出现的情形把正则写成：</p>
<p><code>/^\(?0\d{2,3}\)?-?[1-9]\d{6,7}$/</code></p>
<p>虽然也能匹配上述目标字符串，但也会匹配 (0551-88888888 这样的字符串。当然，这不是我们想要的。</p>
<p>其实这个正则也不是完美的，因为现实中，并不是每个 3 位数和 4 位数都是一个真实的区号。</p>
<p>这就是一个平衡取舍问题，一般够用就行。</p>
<h3 id="632-匹配浮点数">6.3.2 匹配浮点数</h3>
<p>要求匹配如下的格式：</p>
<pre><code>1.23、+1.23、-1.23
10、+10、-10
.2、+.2、-.2
</code></pre>
<p>可以看出正则分为三部分。</p>
<ul>
<li>符号部分：<code>[+-]</code></li>
<li>整数部分：<code>\d+</code></li>
<li>小数部分：<code>\.\d+</code></li>
</ul>
<p>上述三个部分，并不是全部都出现。如果此时很容易写出如下的正则：</p>
<p><code>/^[+-]?(\d+)?(\.\d+)?$/</code></p>
<p>此正则看似没问题，但这个正则也会匹配空字符&quot;&quot;。</p>
<p>因为目标字符串的形式关系不是要求每部分都是可选的。</p>
<ul>
<li>要匹配 1.23、+1.23、-1.23，可以用 <code>/^[+-]?\d+\.\d+$/</code></li>
<li>要匹配 10、+10、-10，可以用 <code>/^[+-]?\d+$/</code></li>
<li>要匹配.2、+.2、-.2，可以用 <code>/^[+-]?\.\d+$/</code></li>
</ul>
<p>因此整个正则是这三者的或的关系，提取公众部分后是：</p>
<p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code></p>
<p>其可视化形式是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586242691060.png" alt="" loading="lazy"></p>
<p>如果要求不匹配 +.2 和 -.2，此时正则变成：</p>
<p><code>/^([+-]?(\d+\.\d+|\d+)|\.\d+)$/</code></p>
<p>其可视化形式是：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586242886280.png" alt="" loading="lazy"></p>
<p>当然，<code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code> 也不是完美的，我们也是做了些取舍，比如：</p>
<ul>
<li>它也会匹配 012 这样以 0 开头的整数。如果要求不匹配的话，需要修改整数部分的正则。</li>
<li>一般进行验证操作之前，都要经过 trim 和判空。那样的话，也许那个错误正则也就够用了。</li>
<li>也可以进一步改写成：<code>/^[+-]?(\d+)?(\.)?\d+$/</code>，这样我们就需要考虑可读性和可维护性了。</li>
</ul>
<h2 id="64-效率">6.4 效率</h2>
<p>保证了准确性后，才需要是否要考虑要优化。大多数情形是不需要优化的，除非运行的非常慢。什么情形正则表达式运行才慢呢？我们需要考察正则表达式的运行过程（原理）。</p>
<p>正则表达式的运行分为如下的阶段：</p>
<ol>
<li>编译；</li>
<li>设定起始位置；</li>
<li>尝试匹配；</li>
<li>匹配失败的话，从下一位开始继续第 3 步；</li>
<li>最终结果：匹配成功或失败。</li>
</ol>
<p>下面以代码为例，来看看这几个阶段都做了什么：</p>
<pre><code class="language-javascript">const regex = /\d+/g;
console.log(regex.lastIndex, regex.exec('123abc34def'));
console.log(regex.lastIndex, regex.exec('123abc34def'));
console.log(regex.lastIndex, regex.exec('123abc34def'));
console.log(regex.lastIndex, regex.exec('123abc34def'));
// =&gt; 0 [&quot;123&quot;, index: 0, input: &quot;123abc34def&quot;]
// =&gt; 3 [&quot;34&quot;, index: 6, input: &quot;123abc34def&quot;]
// =&gt; 8 null
// =&gt; 0 [&quot;123&quot;, index: 0, input: &quot;123abc34def&quot;]
</code></pre>
<p>具体分析如下：</p>
<pre><code class="language-javascript">const regex = /\d+/g;
</code></pre>
<p>当生成一个正则时，引擎会对其进行编译。报错与否出现这这个阶段。</p>
<pre><code class="language-javascript">regex.exec('123abc34def')
</code></pre>
<p>当尝试匹配时，需要确定从哪一位置开始匹配。一般情形都是字符串的开头，即第 0 位。</p>
<p>但当使用 <code>test</code> 和 <code>exec</code> 方法，且正则有 <code>g</code> 时，起始位置是从正则对象的 <code>lastIndex</code> 属性开始。</p>
<p>因此第一次 <code>exec</code> 是从第 <code>0</code> 位开始，而第二次是从 <code>3</code> 开始的。</p>
<p>设定好起始位置后，就开始尝试匹配了。</p>
<p>比如第一次 <code>exec</code>，从 0 开始，去尝试匹配，并且成功地匹配到 3 个数字。此时结束时的下标是 2，因此下一次的起始位置是 3。</p>
<p>而第二次，起始下标是 3，但第 3 个字符是 &quot;a&quot;，并不是数字。但此时并不会直接报匹配失败，而是移动到下一位置，即从第 4 位开始继续尝试匹配，但该字符是 b，也不是数字。再移动到下一位，是 c 仍不行，再移动一位是数字 3，此时匹配到了两位数字 34。此时，下一次匹配的位置是 d 的位置，即第 8 位。</p>
<p>第三次，是从第 8 位开始匹配，直到试到最后一位，也没发现匹配的，因此匹配失败，返回 <code>null</code>。同时设置 <code>lastIndex</code> 为 0，即，如要再尝试匹配的话，需从头开始。</p>
<p>从上面可以看出，匹配会出现效率问题，主要出现在上面的第 3 阶段和第 4 阶段。</p>
<p>因此，主要优化手法也是针对这两阶段的。</p>
<h3 id="641-使用具体型字符组来代替通配符来消除回溯">6.4.1 使用具体型字符组来代替通配符，来消除回溯</h3>
<p>而在第三阶段，最大的问题就是回溯。</p>
<p>例如，匹配双引用号之间的字符。如，匹配字符串 123&quot;abc&quot;456 中的 &quot;abc&quot;。</p>
<p>如果正则用的是：<code>/&quot;.*&quot;/</code>，会在第 3 阶段产生 4 次回溯（粉色表示 <code>.*</code> 匹配的内容）：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586243612058.png" alt="" loading="lazy"></p>
<p>如果正则用的是：<code>/&quot;.*?&quot;/</code>，会产生 2 次回溯（粉色表示 <code>.*?</code> 匹配的内容）：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586243657460.png" alt="" loading="lazy"></p>
<p>因为回溯的存在，需要引擎保存多种可能中未尝试过的状态，以便后续回溯时使用。注定要占用一定的内存。</p>
<p>此时要使用具体化的字符组，来代替通配符.，以便消除不必要的字符，此时使用正则 <code>/&quot;[^&quot;]*&quot;/</code>，即可。</p>
<h3 id="642-使用非捕获型分组">6.4.2 使用非捕获型分组</h3>
<p>因为括号的作用之一是，可以捕获分组和分支里的数据。那么就需要内存来保存它们。</p>
<p>当我们不需要使用分组引用和反向引用时，此时可以使用非捕获分组。例如：</p>
<p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code> 可以修改成：<code>/^[+-]?(?:\d+\.\d+|\d+|\.\d+)$/</code></p>
<h3 id="643-独立出确定字符">6.4.3 独立出确定字符</h3>
<p>例如 <code>/a+/</code>，可以修改成 <code>/aa*/</code>。</p>
<p>因为后者能比前者多确定了字符 a。这样会在第四步中，加快判断是否匹配失败，进而加快移位的速度。</p>
<h3 id="644-提取分支公共部分">6.4.4 提取分支公共部分</h3>
<p>比如 <code>/^abc|^def/</code>，修改成 <code>/^(?:abc|def)/</code>。</p>
<p>又比如 <code>/this|that/</code>，修改成 <code>/th(?:is|at)/</code>。</p>
<p>这样做，可以减少匹配过程中可消除的重复。</p>
<h3 id="645-减少分支的数量缩小它们的范围">6.4.5 减少分支的数量，缩小它们的范围</h3>
<p><code>/red|read/</code>，可以修改成 <code>/rea?d/</code>。此时分支和量词产生的回溯的成本是不一样的。但这样优化后，可读性会降低的。</p>
<h2 id="第-6-章小结">第 6 章小结</h2>
<p>本章涉及的内容并不多。一般情况下，针对某问题能写出一个满足需求的正则，基本上就可以了。至于准确性和效率方面的追求，纯属看个人要求了。我觉得够用就行了。关于准确性，本章关心的是最常用的解决思路：针对每种情形，分别写出正则，然用分支把他们合并在一起，再提取分支公共部分，就能得到准确的正则。至于优化，本章没有为了凑数，去写一大堆。了解了匹配原理，常见的优化手法也就这么几种。</p>
<h1 id="第-7-章-正则表达式编程">第 7 章 正则表达式编程</h1>
<p>什么叫知识，能指导我们实践的东西才叫知识。学习一样东西，如果不能使用，最多只能算作纸上谈兵。<br>
正则表达式的学习，也不例外。掌握了正则表达式的语法后，下一步，也是关键的一步，就是在真实世界中使用它。那么如何使用正则表达式呢？有哪些关键的点呢？本章就解决这个问题。内容包括：</p>
<ol>
<li><a href="#71-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%93%8D%E4%BD%9C">正则表达式的四种操作</a></li>
<li><a href="#72-%E7%9B%B8%E5%85%B3api%E6%B3%A8%E6%84%8F%E8%A6%81%E7%82%B9">相关API注意要点</a></li>
<li><a href="#73-%E7%9C%9F%E5%AE%9E%E6%A1%88%E4%BE%8B">真实案例</a></li>
</ol>
<h2 id="71-正则表达式的四种操作">7.1 正则表达式的四种操作</h2>
<p>正则表达式是匹配模式，不管如何使用正则表达式，万变不离其宗，都需要先“匹配”。</p>
<p>有了匹配这一基本操作后，才有其他的操作：验证、切分、提取、替换。</p>
<p>进行任何相关操作，也需要宿主引擎相关 API 的配合使用。当然，在 JS 中，相关 API 也不多。</p>
<h3 id="711-验证">7.1.1 验证</h3>
<p>验证是正则表达式最直接的应用，比如表单验证。</p>
<p>在说验证之前，先要说清楚匹配是什么概念。</p>
<p>所谓匹配，就是看目标字符串里是否有满足匹配的子串。因此，“匹配”的本质就是“查找”。</p>
<p>有没有匹配，是不是匹配上，判断是否的操作，即称为“验证”。</p>
<p>这里举一个例子，来看看如何使用相关API进行验证操作的。</p>
<p>比如，判断一个字符串中是否有数字。</p>
<ul>
<li>使用 <code>search</code></li>
</ul>
<pre><code class="language-javascript">const regex = /\d/;
const string = 'abc123';
console.log(!!~string.search(regex));
// =&gt; true
</code></pre>
<ul>
<li>使用 <code>test</code></li>
</ul>
<pre><code class="language-javascript">const regex = /\d/;
const string = 'abc123';
console.log(regex.test(string));
// =&gt; true
</code></pre>
<ul>
<li>使用 <code>match</code></li>
</ul>
<pre><code class="language-javascript">const regex = /\d/;
const string = 'abc123';
console.log(!!string.match(regex));
// =&gt; true
</code></pre>
<ul>
<li>使用 <code>exec</code></li>
</ul>
<pre><code class="language-javascript">const regex = /\d/;
const string = 'abc123';
console.log(!!regex.exec(string));
// =&gt; true
</code></pre>
<p>其中，最常用的是 <code>test</code>。</p>
<h3 id="712-切分">7.1.2 切分</h3>
<p>匹配上了，我们就可以进行一些操作，比如切分。</p>
<p>所谓“切分”，就是把目标字符串，切成一段一段的。在 JS 中使用的是 <code>split</code>。</p>
<p>比如，目标字符串是 &quot;html,css,javascript&quot;，按逗号来切分：</p>
<pre><code class="language-javascript">const regex = /,/;
const string = 'html,css,javascript';
console.log(string.split(regex));
// =&gt; [&quot;html&quot;, &quot;css&quot;, &quot;javascript&quot;]
</code></pre>
<p>又比如，如下的日期格式：</p>
<pre><code>2017/06/26
2017.06.26
2017-06-26
</code></pre>
<p>可以使用 <code>split</code>“切出”年月日：</p>
<pre><code class="language-javascript">const regex = /\D/;
console.log('2017/06/26'.split(regex));
console.log('2017.06.26'.split(regex));
console.log('2017-06-26'.split(regex));
// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;26&quot;]
// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;26&quot;]
// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;26&quot;]
</code></pre>
<h3 id="713-提取">7.1.3 提取</h3>
<p>虽然整体匹配上了，但有时需要提取部分匹配的数据。</p>
<p>此时正则通常要使用分组引用（分组捕获）功能，还需要配合使用相关 API。</p>
<p>这里，还是以日期为例，提取出年月日。注意下面正则中的括号：</p>
<ul>
<li><code>match</code></li>
</ul>
<pre><code class="language-javascript">const regex = /^(\d{4})\D(\d{2})\D(\d{2})$/;
const string = '2017-06-26';
console.log(string.match(regex));
// =&gt;[&quot;2017-06-26&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;26&quot;, index: 0, input: &quot;2017-06-26&quot;]
</code></pre>
<ul>
<li><code>exec</code></li>
</ul>
<pre><code class="language-javascript">const regex = /^(\d{4})\D(\d{2})\D(\d{2})$/;
const string = '2017-06-26';
console.log(regex.exec(string));
// =&gt;[&quot;2017-06-26&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;26&quot;, index: 0, input: &quot;2017-06-26&quot;]
</code></pre>
<ul>
<li><code>test</code></li>
</ul>
<pre><code class="language-javascript">const regex = /^(\d{4})\D(\d{2})\D(\d{2})$/;
const string = '2017-06-26';
regex.test(string);
console.log(RegExp.$1, RegExp.$2, RegExp.$3);
// =&gt; &quot;2017&quot; &quot;06&quot; &quot;26&quot;
</code></pre>
<ul>
<li><code>search</code></li>
</ul>
<pre><code class="language-javascript">const regex = /^(\d{4})\D(\d{2})\D(\d{2})$/;
const string = '2017-06-26';
string.search(regex);
console.log(RegExp.$1, RegExp.$2, RegExp.$3);
// =&gt; &quot;2017&quot; &quot;06&quot; &quot;26&quot;
</code></pre>
<ul>
<li><code>replace</code></li>
</ul>
<pre><code class="language-javascript">const regex = /^(\d{4})\D(\d{2})\D(\d{2})$/;
const string = '2017-06-26';
const date = [];
string.replace(regex, function(match, year, month, day) {
	date.push(year, month, day);
});
console.log(date);
// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;26&quot;]
</code></pre>
<p>其中，最常用的是 <code>match</code>。</p>
<h3 id="714-替换">7.1.4 替换</h3>
<p>找，往往不是目的，通常下一步是为了替换。在 JS 中，使用 <code>replace</code> 进行替换。</p>
<p>比如把日期格式，从 yyyy-mm-dd 替换成 yyyy/mm/dd：</p>
<pre><code class="language-javascript">const string = '2017-06-26';
const today = new Date(string.replace(/-/g, '/'));
console.log(today);
// =&gt; Mon Jun 26 2017 00:00:00 GMT+0800 (中国标准时间)
</code></pre>
<p>这里只是简单地应用了一下 <code>replace</code>。但，<code>replace</code> 方法是强大的，是需要重点掌握的。</p>
<h2 id="72-相关api注意要点">7.2. 相关API注意要点</h2>
<p>从上面可以看出用于正则操作的方法，共有 6 个，字符串实例 4 个，正则实例 2 个：</p>
<ul>
<li><code>String</code>#<code>search</code></li>
<li><code>String</code>#<code>split</code></li>
<li><code>String</code>#<code>match</code></li>
<li><code>String</code>#<code>replace</code></li>
<li><code>RegExp</code>#<code>test</code></li>
<li><code>RegExp</code>#<code>exec</code></li>
</ul>
<p>本文不打算详细地讲解它们的方方面面细节，具体可以参考《JavaScript权威指南》的第三部分。本文重点列出一些容易忽视的地方，以飨读者。</p>
<h3 id="721-search-和-match-的参数问题">7.2.1 search 和 match 的参数问题</h3>
<p>我们知道字符串实例的那 4 个方法参数都支持正则和字符串。</p>
<p>但 <code>search</code> 和 <code>match</code>，会把字符串转换为正则的。</p>
<pre><code class="language-javascript">const string = '2017.06.27';
console.log(string.search('.'));
// =&gt; 0
//需要修改成下列形式之一
console.log(string.search('\\.'));
console.log(string.search(/\./));
// =&gt; 4
// =&gt; 4
console.log(string.match('.'));
// =&gt; [&quot;2&quot;, index: 0, input: &quot;2017.06.27&quot;]
//需要修改成下列形式之一
console.log(string.match('\\.'));
console.log(string.match(/\./));
// =&gt; [&quot;.&quot;, index: 4, input: &quot;2017.06.27&quot;]
// =&gt; [&quot;.&quot;, index: 4, input: &quot;2017.06.27&quot;]
console.log(string.split('.'));
// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;27&quot;]
console.log(string.replace('.', '/'));
// =&gt; &quot;2017/06.27&quot;
</code></pre>
<h3 id="722-match-返回结果的格式问题">7.2.2 match 返回结果的格式问题</h3>
<p><code>match</code> 返回结果的格式，与正则对象是否有修饰符 <code>g</code> 有关。</p>
<pre><code class="language-javascript">const string = '2017.06.27';
const regex1 = /\b(\d+)\b/;
const regex2 = /\b(\d+)\b/g;
console.log(string.match(regex1));
console.log(string.match(regex2));
// =&gt; [&quot;2017&quot;, &quot;2017&quot;, index: 0, input: &quot;2017.06.27&quot;]
// =&gt; [&quot;2017&quot;, &quot;06&quot;, &quot;27&quot;]
</code></pre>
<p>没有 <code>g</code>，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。</p>
<p>有 <code>g</code>，返回的是所有匹配的内容。</p>
<p>当没有匹配时，不管有无 <code>g</code>，都返回 <code>null</code>。</p>
<h3 id="723-exec比match更强大">7.2.3 exec比match更强大</h3>
<p>当正则没有 <code>g</code> 时，使用 <code>match</code> 返回的信息比较多。但是有 <code>g</code> 后，就没有关键的信息 <code>index</code> 了。</p>
<p>而 <code>exec</code> 方法就能解决这个问题，它能接着上一次匹配后继续匹配：</p>
<pre><code class="language-javascript">const string = '2017.06.27';
const regex2 = /\b(\d+)\b/g;
console.log(regex2.exec(string));
console.log(regex2.lastIndex);
console.log(regex2.exec(string));
console.log(regex2.lastIndex);
console.log(regex2.exec(string));
console.log(regex2.lastIndex);
console.log(regex2.exec(string));
console.log(regex2.lastIndex);
// =&gt; [&quot;2017&quot;, &quot;2017&quot;, index: 0, input: &quot;2017.06.27&quot;]
// =&gt; 4
// =&gt; [&quot;06&quot;, &quot;06&quot;, index: 5, input: &quot;2017.06.27&quot;]
// =&gt; 7
// =&gt; [&quot;27&quot;, &quot;27&quot;, index: 8, input: &quot;2017.06.27&quot;]
// =&gt; 10
// =&gt; null
// =&gt; 0
</code></pre>
<p>其中正则实例 <code>lastIndex</code> 属性，表示下一次匹配开始的位置。</p>
<p>比如第一次匹配了 &quot;2017&quot;，开始下标是 0，共 4 个字符，因此这次匹配结束的位置是 3，下一次开始匹配的位置是 4。</p>
<p>从上述代码看出，在使用 <code>exec</code> 时，经常需要配合使用 <code>while</code> 循环：</p>
<pre><code class="language-javascript">const string = '2017.06.27';
const regex2 = /\b(\d+)\b/g;
const result;
while (result = regex2.exec(string)) {
	console.log(result, regex2.lastIndex);
}
// =&gt; [&quot;2017&quot;, &quot;2017&quot;, index: 0, input: &quot;2017.06.27&quot;] 4
// =&gt; [&quot;06&quot;, &quot;06&quot;, index: 5, input: &quot;2017.06.27&quot;] 7
// =&gt; [&quot;27&quot;, &quot;27&quot;, index: 8, input: &quot;2017.06.27&quot;] 10
</code></pre>
<h3 id="724-修饰符g对exex和test的影响">7.2.4 修饰符g，对exex和test的影响</h3>
<p>上面提到了正则实例的 <code>lastIndex</code> 属性，表示尝试匹配时，从字符串的 <code>lastIndex</code> 位开始去匹配。</p>
<p>字符串的四个方法，每次匹配时，都是从 0 开始的，即 <code>lastIndex</code> 属性始终不变。</p>
<p>而正则实例的两个方法 <code>exec</code>、<code>test</code>，当正则是全局匹配时，每一次匹配完成后，都会修改 <code>lastIndex</code>。下面让我们以 <code>test</code> 为例，看看你是否会迷糊：</p>
<pre><code class="language-javascript">const regex = /a/g;
console.log(regex.test('a'), regex.lastIndex);
console.log(regex.test('aba'), regex.lastIndex);
console.log(regex.test('ababc'), regex.lastIndex);
// =&gt; true 1
// =&gt; true 3
// =&gt; false 0
</code></pre>
<p>注意上面代码中的第三次调用 <code>test</code>，因为这一次尝试匹配，开始从下标 <code>lastIndex</code> 即 3 位置处开始查找，自然就找不到了。</p>
<p>如果没有 <code>g</code>，自然都是从字符串第 0 个字符处开始尝试匹配：</p>
<pre><code class="language-javascript">const regex = /a/;
console.log(regex.test('a'), regex.lastIndex);
console.log(regex.test('aba'), regex.lastIndex);
console.log(regex.test('ababc'), regex.lastIndex);
// =&gt; true 0
// =&gt; true 0
// =&gt; true 0
</code></pre>
<h3 id="725-test-整体匹配时需要使用-和">7.2.5 test 整体匹配时需要使用 ^ 和 $</h3>
<p>这个相对容易理解，因为 <code>test</code> 是看目标字符串中是否有子串匹配正则，即有部分匹配即可。</p>
<p>如果，要整体匹配，正则前后需要添加开头和结尾：</p>
<pre><code class="language-javascript">console.log(/123/.test('a123b'));
// =&gt; true
console.log(/^123$/.test('a123b'));
// =&gt; false
console.log(/^123$/.test('123'));
// =&gt; true
</code></pre>
<h3 id="726-split-相关注意事项">7.2.6 split 相关注意事项</h3>
<p><code>split</code> 方法看起来不起眼，但要注意的地方有两个的。</p>
<p>第一，它可以有第二个参数，表示结果数组的最大长度：</p>
<pre><code class="language-javascript">const string = 'html,css,javascript';
console.log(string.split(/,/, 2));
// =&gt;[&quot;html&quot;, &quot;css&quot;]
</code></pre>
<p>第二，正则使用分组时，结果数组中是包含分隔符的：</p>
<pre><code class="language-javascript">const string = 'html,css,javascript';
console.log(string.split(/(,)/));
// =&gt;[&quot;html&quot;, &quot;,&quot;, &quot;css&quot;, &quot;,&quot;, &quot;javascript&quot;]
</code></pre>
<h3 id="727-replace-是很强大的">7.2.7 replace 是很强大的</h3>
<p>《JavaScript权威指南》认为 <code>exec</code> 是这 6 个 API 中最强大的，而我始终认为 <code>replace</code> 才是最强大的。因为它也能拿到该拿到的信息，然后可以假借替换之名，做些其他事情。</p>
<p>总体来说 <code>replace</code> 有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。</p>
<p>当第二个参数是字符串时，如下的字符有特殊的含义：</p>
<ul>
<li><code>$1,$2,...,$99</code> 匹配第 1~99 个分组里捕获的文本</li>
<li><code>$&amp;</code> 匹配到的子串文本</li>
<li><code>$`</code> 匹配到的子串的左边文本</li>
<li><code>$'</code> 匹配到的子串的右边文本</li>
<li><code>$$</code> 美元符号</li>
</ul>
<p>例如，把 &quot;2,3,5&quot;，变成 &quot;5=2+3&quot;：</p>
<pre><code class="language-javascript">const result = '2,3,5'.replace(/(\d+),(\d+),(\d+)/, '$3=$1+$2');
console.log(result);
// =&gt; &quot;5=2+3&quot;
</code></pre>
<p>又例如，把 &quot;2,3,5&quot;，变成 &quot;222,333,555&quot;:</p>
<pre><code class="language-javascript">const result = '2,3,5'.replace(/(\d+)/g, '$&amp;$&amp;$&amp;');
console.log(result);
// =&gt; &quot;222,333,555&quot;
</code></pre>
<p>当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：</p>
<pre><code class="language-javascript">'1234 2345 3456'.replace(/(\d)\d{2}(\d)/g, function(match, $1, $2, index, input) {
	console.log([match, $1, $2, index, input]);
});
// =&gt; [&quot;1234&quot;, &quot;1&quot;, &quot;4&quot;, 0, &quot;1234 2345 3456&quot;]
// =&gt; [&quot;2345&quot;, &quot;2&quot;, &quot;5&quot;, 5, &quot;1234 2345 3456&quot;]
// =&gt; [&quot;3456&quot;, &quot;3&quot;, &quot;6&quot;, 10, &quot;1234 2345 3456&quot;]
</code></pre>
<p>此时我们可以看到 <code>replace</code> 拿到的信息，并不比 <code>exec</code> 少。</p>
<h3 id="728-使用构造函数需要注意的问题">7.2.8 使用构造函数需要注意的问题</h3>
<p>一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多 <code>\</code>。</p>
<pre><code class="language-javascript">const string = '2017-06-27 2017.06.27 2017/06/27';
const regex = /\d{4}(-|\.|\/)\d{2}\1\d{2}/g;
console.log(string.match(regex));
// =&gt; [&quot;2017-06-27&quot;, &quot;2017.06.27&quot;, &quot;2017/06/27&quot;]

regex = new RegExp('\\d{4}(-|\\.|\\/)\\d{2}\\1\\d{2}', 'g');
console.log(string.match(regex));
// =&gt; [&quot;2017-06-27&quot;, &quot;2017.06.27&quot;, &quot;2017/06/27&quot;]
</code></pre>
<h3 id="729-修饰符">7.2.9 修饰符</h3>
<p>ES5中修饰符，共3个：</p>
<ul>
<li><code>g</code> 全局匹配，即找到所有匹配的，单词是 global</li>
<li><code>i</code> 忽略字母大小写，单词 ingoreCase</li>
<li><code>m</code> 多行匹配，只影响 <code>^</code> 和 <code>$</code>，二者变成行的概念，即行开头和行结尾。单词是 multiline</li>
</ul>
<p>当然正则对象也有相应的只读属性：</p>
<pre><code class="language-javascript">const regex = /\w/img;
console.log(regex.global);
console.log(regex.ignoreCase);
console.log(regex.multiline);
// =&gt; true
// =&gt; true
// =&gt; true
</code></pre>
<h3 id="7210-source-属性">7.2.10 source 属性</h3>
<p>正则实例对象属性，除了 <code>global</code>、<code>ingnoreCase</code>、<code>multiline</code>、<code>lastIndex</code> 属性之外，还有一个 <code>source</code> 属性。</p>
<p>它什么时候有用呢？</p>
<p>比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：</p>
<pre><code class="language-javascript">const className = 'high';
const regex = new RegExp('(^|\\s)' + className + '(\\s|$)');
console.log(regex.source)
// =&gt; (^|\s)high(\s|$) 即字符串&quot;(^|\\s)high(\\s|$)&quot;
</code></pre>
<h3 id="7211-构造函数属性">7.2.11 构造函数属性</h3>
<p>构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是 <code>$1,...,$9</code> 之外，还有几个不太常用的属性（有兼容性问题）：</p>
<ul>
<li><code>RegExp.input</code> 最近一次目标字符串，简写成 <code>RegExp[&quot;$_&quot;]</code></li>
<li><code>RegExp.lastMatch</code> 最近一次匹配的文本，简写成 <code>RegExp[&quot;$&amp;&quot;]</code></li>
<li><code>RegExp.lastParen</code> 最近一次捕获的文本，简写成 <code>RegExp[&quot;$+&quot;]</code></li>
<li><code>RegExp.leftContext</code> 目标字符串中 <code>lastMatch</code> 之前的文本，简写成 <code>RegExp[&quot;$`&quot;]</code></li>
<li><code>RegExp.rightContext</code> 目标字符串中 <code>lastMatch</code> 之后的文本，简写成 <code>RegExp[&quot;$'&quot;]</code></li>
</ul>
<p>测试代码如下：</p>
<pre><code class="language-javascript">const regex = /([abc])(\d)/g;
const string = 'a1b2c3d4e5';
string.match(regex);

console.log(RegExp.input);
console.log(RegExp['$_']);
// =&gt; &quot;a1b2c3d4e5&quot;

console.log(RegExp.lastMatch);
console.log(RegExp['$&amp;']);
// =&gt; &quot;c3&quot;

console.log(RegExp.lastParen);
console.log(RegExp['$+']);
// =&gt; &quot;3&quot;

console.log(RegExp.leftContext);
console.log(RegExp[&quot;$`&quot;]);
// =&gt; &quot;a1b2&quot;

console.log(RegExp.rightContext);
console.log(RegExp[&quot;$'&quot;]);
// =&gt; &quot;d4e5&quot;
</code></pre>
<h2 id="73-真实案例">7.3 真实案例</h2>
<h3 id="731-使用构造函数生成正则表达式">7.3.1 使用构造函数生成正则表达式</h3>
<p>我们知道要优先使用字面量来创建正则，但有时正则表达式的主体是不确定的，此时可以使用构造函数来创建。模拟 <code>getElementsByClassName</code> 方法，就是很能说明该问题的一个例子。</p>
<p>这里 <code>getElementsByClassName</code> 函数的实现思路是：</p>
<ul>
<li>比如要获取 <code>className</code> 为 &quot;high&quot; 的 dom 元素；</li>
<li>首先生成一个正则：<code>/(^|\s)high(\s|$)/</code>；</li>
<li>然后再用其逐一验证页面上的所有 dom 元素的类名，拿到满足匹配的元素即可。</li>
</ul>
<p>代码如下(可以直接复制到本地查看运行效果)：</p>
<pre><code class="language-html">&lt;p class=&quot;high&quot;&gt;1111&lt;/p&gt;
&lt;p class=&quot;high&quot;&gt;2222&lt;/p&gt;
&lt;p&gt;3333&lt;/p&gt;
&lt;script&gt;
function getElementsByClassName(className) {
	var elements = document.getElementsByTagName(&quot;*&quot;);
	var regex = new RegExp(&quot;(^|\\s)&quot; + className + &quot;(\\s|$)&quot;);
	var result = [];
	for (var i = 0; i &lt; elements.length; i++) {
		var element = elements[i];
		if (regex.test(element.className)) {
			result.push(element)
		}
	}
	return result;
}
var highs = getElementsByClassName('high');
highs.forEach(function(item) {
	item.style.color = 'red';
});
&lt;/script&gt;
</code></pre>
<h3 id="732-使用字符串保存数据">7.3.2 使用字符串保存数据</h3>
<p>一般情况下，我们都愿意使用数组来保存数据。但我看到有的框架中，使用的却是字符串。</p>
<p>使用时，仍需要把字符串切分成数组。虽然不一定用到正则，但总感觉酷酷的，这里分享如下：</p>
<pre><code class="language-javascript">const utils = {};
'Boolean|Number|String|Function|Array|Date|RegExp|Object|Error'.split('|').forEach(function(item) {
	utils['is' + item] = function(obj) {
		return {}.toString.call(obj) == '[object ' + item + ']';
	};
});
console.log( utils.isArray([1, 2, 3]) );
// =&gt; true
</code></pre>
<h3 id="733-if-语句中使用正则替代">7.3.3 if 语句中使用正则替代 &amp;&amp;</h3>
<p>比如，模拟 <code>ready</code> 函数，即加载完毕后再执行回调（不兼容 IE 的）：</p>
<pre><code class="language-javascript">const readyRE = /complete|loaded|interactive/;

function ready(callback) {
	if (readyRE.test(document.readyState) &amp;&amp; document.body) {
		callback()
	} else {
		document.addEventListener(
			'DOMContentLoaded', 
			function () {
				callback()
			},
			false
		);
	}
};
ready(function() {
	alert('加载完毕！')
});
</code></pre>
<h3 id="734-使用强大的-replace">7.3.4 使用强大的 replace</h3>
<p>因为 <code>replace</code> 方法比较强大，有时用它根本不是为了替换，只是拿其匹配到的信息来做文章。</p>
<p>这里以查询字符串（querystring）压缩技术为例，注意下面 <code>replace</code> 方法中，回调函数根本没有返回任何东西。</p>
<pre><code class="language-javascript">function compress(source) {
	var keys = {};
	source.replace(/([^=&amp;]+)=([^&amp;]*)/g, function(full, key, value) {
		keys[key] = (keys[key] ? keys[key] + ',' : '') + value;
	});
	var result = [];
	for (var key in keys) {
		result.push(key + '=' + keys[key]);
	}
	return result.join('&amp;');
}

console.log(compress(&quot;a=1&amp;b=2&amp;a=3&amp;b=4&quot;));
// =&gt; &quot;a=1,3&amp;b=2,4&quot;
</code></pre>
<h3 id="735-综合运用">7.3.5 综合运用</h3>
<p>最后这里再做个简单实用的正则测试器。</p>
<p>具体效果如下：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586256989268.gif" alt="" loading="lazy"><br>
代码，直接贴了，相信你能看得懂：</p>
<pre><code class="language-html">&lt;section&gt;
	&lt;div id=&quot;err&quot;&gt;&lt;/div&gt;
	&lt;input id=&quot;regex&quot; placeholder=&quot;请输入正则表达式&quot;&gt;
	&lt;input id=&quot;text&quot; placeholder=&quot;请输入测试文本&quot;&gt;
	&lt;button id=&quot;run&quot;&gt;测试一下&lt;/button&gt;
	&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;style&gt;
section{
	display:flex;
	flex-direction:column;
	justify-content:space-around;
	height:300px;
	padding:0 200px;
}
section *{
	min-height:30px;
}
#err {
	color:red;
}
#result{
	line-height:30px;
}
.info {
	background:#00c5ff;
	padding:2px;
	margin:2px;
	display:inline-block;
}
&lt;/style&gt;
&lt;script&gt;
(function() {
	// 获取相应dom元素
	var regexInput = document.getElementById(&quot;regex&quot;);
	var textInput = document.getElementById(&quot;text&quot;);
	var runBtn = document.getElementById(&quot;run&quot;);
	var errBox = document.getElementById(&quot;err&quot;);
	var resultBox = document.getElementById(&quot;result&quot;);
	
	// 绑定点击事件
	runBtn.onclick = function() {
		// 清除错误和结果
		errBox.innerHTML = &quot;&quot;;
		resultBox.innerHTML = &quot;&quot;;
		
		// 获取正则和文本
		var text = textInput.value;
		var regex = regexInput.value;
		
		if (regex == &quot;&quot;) {
			errBox.innerHTML = &quot;请输入正则表达式&quot;;
		} else if (text == &quot;&quot;) {
			errBox.innerHTML = &quot;请输入测试文本&quot;;
		} else {
			regex = createRegex(regex);
			if (!regex) return;
			var result, results = [];
			
			// 没有修饰符g的话，会死循环
			if (regex.global) {
				while(result = regex.exec(text)) {
					results.push(result);
				}
			} else {
				results.push(regex.exec(text));
			}
						
			if (results[0] == null) {
				resultBox.innerHTML = &quot;匹配到0个结果&quot;;
				return;
			}
			
			// 倒序是有必要的
			for (var i = results.length - 1; i &gt;= 0; i--) {
				var result = results[i];
				var match = result[0];
				var prefix = text.substr(0, result.index);
				var suffix = text.substr(result.index + match.length);
				text = prefix 
					+ '&lt;span class=&quot;info&quot;&gt;'
					+ match
					+ '&lt;/span&gt;'
					+ suffix;
			}
			resultBox.innerHTML = &quot;匹配到&quot; + results.length + &quot;个结果:&lt;br&gt;&quot; + text;
		}
	};
	
	// 生成正则表达式，核心函数
	function createRegex(regex) {
		try {
			if (regex[0] == &quot;/&quot;) {
				regex = regex.split(&quot;/&quot;);
				regex.shift();
				var flags = regex.pop();
				regex = regex.join(&quot;/&quot;);
				regex = new RegExp(regex, flags);
			} else {
				regex = new RegExp(regex, &quot;g&quot;);
			}
			return regex;
		} catch(e) {
			errBox.innerHTML = &quot;无效的正则表达式&quot;;
			return false;
		}
	}
})();
&lt;/script&gt;
</code></pre>
<h2 id="第-7-章小结">第 7 章小结</h2>
<p>相关API的注意点，本章基本上算是一网打尽了。</p>
<p>至于文中的例子，都是点睛之笔，没有详细解析。如有理解不透的，建议自己敲一敲。</p>
<h1 id="后记">后记</h1>
<p>文章要结束了，最后还要有几点说明。</p>
<h2 id="1-需要注意的地方">1. 需要注意的地方</h2>
<p>本文主要讨论的是 JavaScript 的正则表达式，更精确地说是 ES5 的正则表达式。</p>
<p>JavaScript 的正则表达式引擎是传统型 NFA 的，因此本系列的讨论是适合任何一门正则引擎是传统型 NFA 的编程语言。当然，市面上大部分语言的正则引擎都是这种的。而 JS 里正则涉及到的所有语法要点，是这种引擎支持的核心子集。也就是说，要学正则表达式，不妨以 JS 正则为出发点。</p>
<h2 id="2-参考资料">2. 参考资料</h2>
<p>当然本文不是无本之末。主要参考的是几本书籍。</p>
<p>以下书籍中核心章节都认真阅读过，甚至阅读多遍。</p>
<ul>
<li><a href="https://book.douban.com/subject/10549733/">《JavaScript权威指南》</a>，看完本系列，再去看书中的第 10 章，你就知道了什么叫字字珠玑。</li>
<li><a href="https://book.douban.com/subject/2154713/">《精通正则表达式》</a>，权威且比较杂乱，我阅读的第一本正则表达式书籍。</li>
<li><a href="https://book.douban.com/subject/26285406/">《正则表达式必知必会》</a>，这是我看的第二本正则，看完后，确定自己算是入门了。</li>
<li><a href="https://book.douban.com/subject/10591096/">《正则指引》</a>，《精通正则表达式》的译者写的，相对清晰。</li>
<li><a href="https://book.douban.com/subject/22182383/">《正则表达式入门》</a>，我看的是英文版的，对于已经入门的我，基本没多少收获了。</li>
<li><a href="https://book.douban.com/subject/25986599/">《正则表达式经典实例》</a>，除了第 3 章，比较杂外，也有收获，以实例为主导的一本书。</li>
<li><a href="https://book.douban.com/subject/26630579/">《JavaScript Regular Expressions》</a>，为数不多转讲 JS 正则的。页数不多，也有收获。</li>
<li><a href="https://book.douban.com/subject/5362856/">《高性能JavaScript 》</a>第 5 章，我看的是英文版的。第 5 章，讲了回溯和优化。</li>
<li><a href="https://book.douban.com/subject/26638316/">《JavaScript忍者秘籍》</a>第 7 章，大概讲了一下正则的用法，几个例子还不错。</li>
<li><a href="https://book.douban.com/subject/10546125/">《JavaScript高级程序设计》</a>第 5.4 节，比较简短的介绍。</li>
</ul>
<p>使用的工具：</p>
<ul>
<li><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24">Regulex</a>，一款可视化工具</li>
<li><a href="https://www.processon.com/">ProcessOn</a> - 免费在线作图，实时协作</li>
<li><a href="https://www.appinn.com/licecap/">LICEcap</a> – 灵活好用，GIF 屏幕录制工具</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式——断言人话版]]></title>
        <id>https://tdmaker.github.io/faded/post/regular-expression-assert-mandarin/</id>
        <link href="https://tdmaker.github.io/faded/post/regular-expression-assert-mandarin/">
        </link>
        <updated>2020-04-06T07:02:40.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><a href="https://juejin.im/post/5b9e7b6ce51d450e8a65ed6b">这次不会说我的正则教程没写全了吧？？</a></p>
</blockquote>
<h1 id="零宽断言">零宽断言</h1>
<ul>
<li><strong>断言</strong>：俗话的断言就是“我断定什么什么”，而正则中的断言，就是说正则可以指明在指定内容的前面或后面会出现满足指定规则的内容，意思正则也可以像人类那样断定什么什么，比如“ss1aa2bb3”，正则可以用断言找出 aa2 前面有 bb3，也可以找出 aa2 后面有 ss1。</li>
<li><strong>零宽</strong>：就是没有宽度，在正则中，断言只是匹配位置，不占字符，也就是说，匹配结果里是不会返回断言本身。</li>
</ul>
<p>假设我们要用爬虫抓取 csdn 里的文章阅读量。通过查看源代码可以看到文章阅读量这个内容是这样的结构：</p>
<pre><code class="language-html">&lt;span class=&quot;read-count&quot;&gt;阅读数：641&lt;/span&gt;
</code></pre>
<p>需要获得这里边的‘641’有很多种办法，但如果使用正则应该怎么匹配呢？下面先讲一下几种类型的断言：</p>
<h2 id="正向先行断言正前瞻">💡正向先行断言（正前瞻）</h2>
<ul>
<li>语法：<code>(?=pattern)</code>；</li>
<li>作用：匹配 pattern 表达式的前面内容，不返回本身。</li>
</ul>
<p>要取到阅读量，在正则表达式中就意味着要能匹配到‘<code>&lt;/span&gt;</code>’前面的数字内容，按照上所说的正向先行断言可以匹配表达式前面的内容，那意思就是：<code>(?=&lt;/span&gt;)</code> 就可以匹配到前面的内容了。</p>
<pre><code class="language-javascript">const regExp = /.+(?=&lt;\/span&gt;)/;
const str = &quot;&lt;span class=\&quot;read-count\&quot;&gt;阅读数：641&lt;/span&gt;&quot;
console.log(regExp.exec(str));
// 匹配结果：
[
 '&lt;span class=&quot;read-count&quot;&gt;阅读数：641',
 index: 0,
 input: '&lt;span class=&quot;read-count&quot;&gt;阅读数：641&lt;/span&gt;',
 groups: undefined
]
</code></pre>
<p>仅匹配前面的数字：</p>
<pre><code class="language-javascript">const regExp = /\d+(?=&lt;\/span&gt;)/;
const str = &quot;&lt;span class=\&quot;read-count\&quot;&gt;阅读数：641&lt;/span&gt;&quot;
console.log(regExp.exec(str));
// 匹配结果：
[
 '641',
 index: 29,
 input: '&lt;span class=&quot;read-count&quot;&gt;阅读数：641&lt;/span&gt;',
 groups: undefined
]
</code></pre>
<h2 id="正向后行断言正后顾">💡正向后行断言（正后顾）:</h2>
<ul>
<li>语法：<code>(?&lt;=pattern)</code>；</li>
<li>作用：匹配 pattern 表达式的后面的内容，不返回本身。</li>
</ul>
<p>有先行就有后行，先行是匹配前面的内容，那后行就是匹配后面的内容啦。上面的栗子，我们也可以用后行断言来处理。</p>
<pre><code class="language-javascript">const regExp= /(?&lt;=&lt;span class=\&quot;read-count\&quot;&gt;阅读数：)\d+/;
const str = &quot;&lt;span class=\&quot;read-count\&quot;&gt;阅读数：641&lt;/span&gt;&quot;
console.log(regExp.exec(str));
// 匹配结果
[
 '641',
 index: 29,
 input: '&lt;span class=&quot;read-count&quot;&gt;阅读数：641&lt;/span&gt;',
 groups: undefined
]
</code></pre>
<h2 id="负向先行断言负前瞻">💡负向先行断言（负前瞻）</h2>
<ul>
<li>语法：<code>(?!pattern)</code>；</li>
<li>作用：匹配非 pattern 表达式的前面内容，不返回本身。</li>
</ul>
<p>有正向也有负向，负向在这里其实就是非的意思。举个栗子：比如有一句 “我爱祖国，我是祖国的花朵”，现在要找到不是 “的花朵”前面的“祖国”，用正则就可以这样写：<code>祖国(?!的花朵)</code>。</p>
<h2 id="负向后行断言负后顾">💡负向后行断言（负后顾）</h2>
<ul>
<li>语法：<code>(?&lt;!pattern)</code>；</li>
<li>作用：匹配非 pattern 表达式的后面内容，不返回本身。</li>
</ul>
<h1 id="捕获和非捕获">捕获和非捕获</h1>
<p>单纯说到捕获，他的意思是匹配表达式，但捕获通常和分组联系在一起，也就是“捕获组”。捕获组：匹配子表达式的内容，把匹配结果保存到内存中数字编号或显示命名的组里，以深度优先进行编号，之后可以通过序号或名称来使用这些匹配结果。<br>
而根据命名方式的不同，又可以分为两种组：</p>
<h2 id="数字编号捕获组">💡数字编号捕获组</h2>
<ul>
<li>语法：<code>(exp)</code>；</li>
<li>解释：从表达式左侧开始，每出现一个左括号和它对应的右括号之间的内容为一个分组，在分组中，第 0 组为整个表达式，第一组开始为分组。</li>
</ul>
<p>比如固定电话的：020-85653333，它的正则表达式为：<code>(0\d{2})-(\d{8})</code>，按照左括号的顺序，这个表达式有如下分组：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>编号</th>
<th>分组</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td><code>(0\d{2})-(\d{8})</code></td>
<td>020-85653333</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td><code>(0\d{2})</code></td>
<td>020</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td><code>(\d{8})</code></td>
<td>85653333</td>
</tr>
</tbody>
</table>
<p>下面来验证一下：</p>
<pre><code class="language-javascript">const str = '020-85653333';
const regExp=/(0\d{2})-(\d{8})/;
console.log(regExp.exec(str));
// 输出结果：
[
 '020-85653333',
 '020',
 '85653333',
 index: 0,
 input: '020-85653333',
 groups: undefined
]
</code></pre>
<p>可见，分组个数是2，但是因为第0个为整个表达式本身，因此也一起输出了。</p>
<h2 id="命名编号捕获组">💡命名编号捕获组：</h2>
<ul>
<li>语法：<code>(?&lt;name&gt;exp)</code>；</li>
<li>解释：分组的命名由表达式中的name指定。</li>
</ul>
<p>比如区号也可以这样写: <code>(?&lt;quhao&gt;\0\d{2})-(?&lt;haoma&gt;\d{8})</code>，按照左括号的顺序，这个表达式有如下分组：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>名称</th>
<th>分组</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td><code>(0\d{2})-(\d{8})</code></td>
<td>020-85653333</td>
</tr>
<tr>
<td>1</td>
<td>quhao</td>
<td><code>(0\d{2})</code></td>
<td>020</td>
</tr>
<tr>
<td>2</td>
<td>haoma</td>
<td><code>(\d{8})</code></td>
<td>85653333</td>
</tr>
</tbody>
</table>
<pre><code class="language-javascript">const str = '020-85653333';
const regExp=/(?&lt;quhao&gt;0\d{2})-(?&lt;haoma&gt;\d{8})/;
console.log(regExp.exec(str));
// 输出结果：
[
 '020-85653333',
 '020',
 '85653333',
 index: 0,
 input: '020-85653333',
 groups: [Object: null prototype] { quhao: '020', haoma: '85653333' }
]
</code></pre>
<h2 id="非捕获组">💡非捕获组：</h2>
<ul>
<li>语法：(?:exp)；</li>
<li>解释：和捕获组刚好相反，它用来标识那些不需要捕获的分组，说的通俗一点，就是你可以根据需要去保存你的分组。</li>
</ul>
<p>比如上面的正则表达式，程序不需要用到第一个分组，那就可以这样写：<code>1(?:\0\d{2})-(\d{8})</code>。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>编号</th>
<th>分组</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td><code>(0\d{2})-(\d{8})</code></td>
<td>020-85653333</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td><code>(\d{8})</code></td>
<td>85653333</td>
</tr>
</tbody>
</table>
<pre><code class="language-javascript">const str = '020-85653333';
const regExp=/(?:0\d{2})-(\d{8})/;
console.log(regExp.exec(str));
// 运行结果：
[
 '020-85653333',
 '85653333',
 index: 0,
 input: '020-85653333',
 groups: undefined
]
</code></pre>
<h1 id="反向引用">反向引用</h1>
<p>上面讲到捕获，我们知道：<strong>捕获会返回一个捕获组，这个分组是保存在内存中，不仅可以在正则表达式外部通过程序进行引用，也可以在正则表达式内部进行引用，这种引用方式就是反向引用</strong>。<br>
根据捕获组的命名规则，反向引用可分为：</p>
<ul>
<li>数字编号组反向引用：<code>\k</code> 或 <code>\number</code>；</li>
<li>命名编号组反向引用：<code>\k</code>或者 <code>\'name'</code>。</li>
</ul>
<p>捕获组通常是和反向引用一起使用的。上面说到捕获组是匹配子表达式的内容按序号或者命名保存起来以便使用。注意两个字眼：“<strong>内容</strong>” 和 “<strong>使用</strong>”，这里所说的“<strong>内容</strong>”，是匹配结果，而不是子表达式本身。这里所说的“<strong>使用</strong>”的作用主要是用来查找一些重复的内容或者做替换指定字符。</p>
<p>还是举栗子吧：比如要查找一串字母 &quot;aabbbbgbddesddfiid&quot; 里成对的字母，如果按照我们之前学到的正则，什么区间啊限定啊断言啊可能是办不到的，现在我们先用程序思维理一下思路：</p>
<ol>
<li>匹配到一个字母；</li>
<li>匹配第下一个字母，检查是否和上一个字母是否一样；</li>
<li>如果一样，则匹配成功，否则失败；</li>
</ol>
<p>这里的思路 2 中匹配下一个字母时，需要用到上一个字母，那怎么记住上一个字母呢？这下子捕获就有用处啦，我们可以利用捕获把上一个匹配成功的内容用来作为本次匹配的条件。好了，有思路就要实践，首先匹配一个字母：<code>\w</code>，我们需要做成分组才能捕获，因此写成这样：<code>(\w)</code>，那这个表达式就有一个捕获组：<code>(\w)</code>，然后我们要用这个捕获组作为条件，那就可以：<code>(\w)\1</code>，这样就大功告成了，可能有人不明白了，<code>\1</code> 是什么意思呢？<br>
还记得捕获组有两种命名方式吗，一种是是根据<strong>捕获分组顺序命名</strong>，一种是<strong>自定义命名</strong>来作为捕获组的命名。在默认情况下都是以<strong>数字</strong>来命名，而且数字命名的顺序是从 1 开始的。因此要引用第一个捕获组，根据反向引用的数字命名规则 就需要 <code>\k&lt;1&gt;</code> 或者 <code>\1</code> 当然，通常都是是后者。<br>
我们来测试一下：</p>
<pre><code class="language-javascript">const str = 'aabbbbgbddesddfiid';
const regExp=/(\w)\1/g;
console.log(str.match(regExp));
运行结果：
[ 'aa', 'bb', 'bb', 'dd', 'dd', 'ii' ]
</code></pre>
<p>再举个替换的例子，假如想要把字符串中 abc 换成 a：</p>
<pre><code class="language-javascript">const str = 'abcbbabcbcgbddesddfiid';
const regExp=/(a)(b)c/g;
console.log(str.replace(regExp, '$1'));
// 输出结果：
abcbbabcbcgbddesddfiid
</code></pre>
<h1 id="贪婪和非贪婪">贪婪和非贪婪</h1>
<h2 id="贪婪">💡贪婪</h2>
<p><strong>贪婪匹配</strong>：当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符，这匹配方式叫做贪婪匹配。<br>
<strong>特性</strong>：一次性读入整个字符串进行匹配，每当不匹配就舍弃最右边一个字符，继续匹配，依次匹配和舍弃（这种匹配-舍弃的方式也叫做<strong>回溯</strong>），直到匹配成功或者把整个字符串舍弃完为止，因此它是一种最大化的数据返回，能多不会少。<br>
前面我们讲过重复限定符，其实这些限定符就是贪婪量词，比如表达式：<code>\d{3,6}</code> 用来匹配 3 到 6 位数字，在这种情况下，它是一种贪婪模式的匹配，也就是假如字符串里有 6 个数字可以匹配，那它就是全部匹配到。例如：</p>
<pre><code class="language-javascript">const str = &quot;61762828 176 2991 871&quot;;
const regExp=/\d{3,6}/g;
console.log(str.match(regExp));
// 输出结果：
[ '617628', '176', '2991', '871' ]
</code></pre>
<p>由结果可见：本来字符串中的“61762828”这一段，其实只需要出现3个（617）就已经匹配成功了的，但是他并不满足，而是匹配到了最大能匹配的字符，也就是6个。<br>
一个量词就如此贪婪了，那有人会问，如果多个贪婪量词凑在一起，那他们是如何支配自己的匹配权的呢？是这样的，多个贪婪在一起时，如果字符串能满足他们各自最大程度的匹配时，就互不干扰，但如果不能满足时，会根据<strong>深度优先原则</strong>，也就是从左到右的每一个贪婪量词，优先最大数量的满足，剩余再分配下一个量词匹配。</p>
<pre><code class="language-javascript">const str = &quot;61762828 176 2991 87321&quot;;
const regExp=/(\d{1,2})(\d{3,4})/g;
console.log(str.match(regExp));
// 输出结果：
[ '617628', '2991', '87321' ]
</code></pre>
<p>解答：</p>
<ul>
<li>“617628” 是前面的 <code>\d{1,2}</code> 匹配出了 61，后面的匹配出了 7628；</li>
<li>“2991”是前面的 <code>\d{1,2}</code> 匹配出了 2 ，后面的匹配出了 991(满足匹配优先，再最大程度的贪婪)；</li>
<li>“87321”是前面的 <code>\d{1,2}</code> 匹配出了 87，后面的匹配出了 321。</li>
</ul>
<h2 id="懒惰非贪婪">💡懒惰（非贪婪）</h2>
<p><strong>懒惰匹配</strong>：当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能少的字符，这匹配方式叫做懒惰匹配。<br>
<strong>特性</strong>：从左到右，从字符串的最左边开始匹配，每次试图不读入字符匹配，匹配成功，则完成匹配，否则读入一个字符再匹配，依此循环（读入字符、匹配）直到匹配成功或者把字符串的字符匹配完为止。<br>
懒惰量词是在贪婪量词后面加个“<code>?</code>”。</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*?</code></td>
<td>重复任意次，但尽可能少重复</td>
</tr>
<tr>
<td><code>+?</code></td>
<td>重复 1 次或更多次，但尽可能少重复</td>
</tr>
<tr>
<td><code>??</code></td>
<td>重复 0 次或 1 次，但尽可能少重复</td>
</tr>
<tr>
<td><code>{n,m}?</code></td>
<td>重复 n 到 m 次，但尽可能少重复</td>
</tr>
<tr>
<td><code>{n,}?</code></td>
<td>重复 n 次以上，但尽可能少重复</td>
</tr>
</tbody>
</table>
<pre><code class="language-javascript">const str = &quot;61762828 176 2991 87321&quot;;
const regExp=/(\d{1,2}?)(\d{3,4})/g;
console.log(str.match(regExp));
// 输出结果：
[ '61762', '2991', '87321' ]
</code></pre>
<p>解答：</p>
<ul>
<li>“61762”是左边的懒惰匹配出 6，右边的贪婪匹配出 1762；</li>
<li>“2991”是左边的懒惰匹配出 2，右边的贪婪匹配出 991；</li>
<li>“87321”左边的懒惰匹配出 8，右边的贪婪匹配出 7321。</li>
</ul>
<h1 id="反义">反义</h1>
<p>前面说到元字符的都是要匹配什么什么，当然如果你想反着来，不想匹配某些字符，正则也提供了一些常用的反义元字符：</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\W</code></td>
<td>匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任意不是空白符的字符</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配任意非数字的字符</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td><code>[^x]</code></td>
<td>匹配除了 x 以外的任意字符</td>
</tr>
<tr>
<td><code>[^aeiou]</code></td>
<td>匹配除了 aeiou 这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式——NFA]]></title>
        <id>https://tdmaker.github.io/faded/post/regular-expression-nfa/</id>
        <link href="https://tdmaker.github.io/faded/post/regular-expression-nfa/">
        </link>
        <updated>2020-04-06T02:36:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><a href="https://juejin.im/post/5bbab1f5f265da0aa94a2842">正则表达式和NFA</a></p>
</blockquote>
<h1 id="nfa">NFA</h1>
<p>NFA 是指 Nondeterministic Finite Automaton，非确定有限状态自动机。</p>
<ul>
<li>
<p>目前正则表达式引擎主要有两种：NFA 和 DFA；</p>
</li>
<li>
<p>JavaScript 采用的是 NFA 引擎。<br>
<img src="https://tdmaker.github.io/faded//post-images/finite-automaton.png" alt="有限状态机" loading="lazy"><br>
状态机中有这样一些要素，对照上图分别说下：</p>
</li>
<li>
<p><strong>开始状态</strong>：圆圈表示状态，被一个“没有起点的箭头”指向的状态，是开始状态，上例中是 S1；</p>
</li>
<li>
<p><strong>最终状态</strong>：也叫接受状态，图中用双圆圈表示，这个例子中也是 S1；</p>
</li>
<li>
<p><strong>输入</strong>：在一个状态下，向状态机输入的符号/信号，不同输入导致状态机产生不同的状态改变；</p>
</li>
<li>
<p><strong>转换</strong>：在一个状态下，根据特定输入，改变到特定状态的过程，就是转换。</p>
</li>
</ul>
<p>所以有限状态机的工作过程，就是从开始状态，根据不同的输入，自动进行状态转换的过程。</p>
<p>上图中的状态机的功能，是检测二进制数是否含有偶数个 0。从图上可以看出，输入只有 1 和 0 两种。从 S1 状态开始，只有输入 0 才会转换到 S2 状态，同样 S2 状态下只有输入 0 才会转换到 S1。所以，二进制数输入完毕，如果满足最终状态，也就是最后停在 S1 状态，那么输入的二进制数就含有偶数个 0。<br>
正则表达式，可以认为是对一组字符串集合的描述。例如 <code>(a+|b)c</code> 对应的字符串集合是：</p>
<pre><code class="language-javascript">ac
bc
aac
aaac
aaaac
...
</code></pre>
<p>有限状态机也可以用来描述字符串集合，同样是正则表达式所描述的集合，用有限状态机来表示，可以是这样的：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586143387008.png" alt="正则表达式的有限状态机表示" loading="lazy"><br>
并且，有限状态机是可以“<strong>执行</strong>”的，给出如上的状态机之后，就可以用来对输入的字符串进行检测。如果最终匹配，也就意味着输入的字符串和正则表达式 <code>(a+|b)c</code> 匹配。<br>
所以，编程语言中的正则表达式，一般是通过有限状态机来实现。正则表达式匹配字符串的过程，可以分解为：</p>
<ul>
<li>正则表达式转换为等价的有限状态机；</li>
<li>有限状态机输入字符串执行。</li>
</ul>
<p>这里再讲一下 NFA 和 DFA 的区别。DFA 是 Deterministic Finite Automaton，确定有限状态机。DFA 可以认为是一种特殊的 NFA，它最大的特点，就是确定性。它的确定性在于，在一个状态下，输入一个符号，一定是转换到确定的状态，没有其他的可能性。<br>
举个例子，对于正则表达式 <code>ab|ac</code>，对应 NFA 可以是这样的：<br>
<img src="https://tdmaker.github.io/faded//post-images/regular-expression-nondeterministic-finite-automaton.png" alt=" 非确定性有限自动机" loading="lazy"><br>
可以看到，在状态 1 这里，如果输入 <code>a</code>，其实有两种可能，如果后面的符号是 <code>b</code>，那么可以匹配成功，后面符号是 <code>c</code> 也能匹配成功。所以状态机在执行过程中，可能要尝试所有的可能性。在尝试一种可能路径匹配失败后，还要回到之前的状态再尝试其他的路径，这就是“<strong>回溯</strong>”。<br>
但是 DFA 消除了这种不确定性，所以可以想见，其执行性能应该要比 NFA 更好，因为不需要回溯。<br>
NFA 是可以转换为等价的 DFA 的，也就是说，理论上讲，正则表达式可以用 DFA 来实现，从而获得优于 NFA 的执行性能。但是 NFA 转换 DFA 的过程，会消耗更多资源，甚至最终得到的 DFA 要占用大量存储空间（据有的资料的说法，可能会产生指数级增长）。而且，DFA 相比 NFA，在实现一些正则表达式的特性时会更复杂，成本更高。所以当前的许多编程语言，其正则表达式引擎为 NFA 模式。</p>
<pre><code class="language-javascript">/nfa|nfa not/.test('nfa not');
</code></pre>
<p>用上面的正则表达式来测试字符串 <code>nfa not</code>，NFA 引擎在检测满足 <code>nfa</code> 就返回匹配成功的结果了，而 DFA 则会尝试继续查找，也就是说会得到“<strong>最长的匹配结果</strong>”。</p>
<h1 id="从正则表达式到-nfa">从正则表达式到 NFA</h1>
<h2 id="thompson-算法">🏈Thompson 算法</h2>
<p>Thompson 算法用于转换正则表达式为 NFA，它并非最高效的算法，但是实用，易于理解。<br>
Thompson 算法中使用最基本的两种转换：<img src="https://tdmaker.github.io/faded//post-images/regular-expression-thompson-transmission.png" alt="Thompson 转换" loading="lazy"><br>
<strong>普通转换</strong>就是在一个状态下，输入字符 <code>a</code> 后转换至另一个状态；<strong>epsilon转换</strong>则不需要有输入，就从一个状态转换至另一个状态。</p>
<p>正则表达式中的各种运算，可以通过组合上述两种转换实现：</p>
<ul>
<li>组合转换 RS：<img src="https://tdmaker.github.io/faded//post-images/regexp-thompson-combination.png" alt="组合转换 RS" loading="lazy"></li>
<li>替换转换 R|S：<img src="https://tdmaker.github.io/faded//post-images/regexp-thompson-replace.png" alt="替换转换 R|S" loading="lazy"></li>
<li>重复转换 R*：<img src="https://tdmaker.github.io/faded//post-images/regexp-thompson-repeat.png" alt="重复转换 R*" loading="lazy"></li>
</ul>
<p>上面图中的 R、S 是有开始状态和结束状态的 NFA。<br>
以正则表达式 ab|c 为例，包括两个运算：</p>
<ul>
<li><code>ab</code> 组合</li>
<li><code>ab</code> 的结果，与 <code>c</code> 替换<br>
这样我们把正则表达式视为一系列输入和运算，进行分解、组合，就可以得到最终的 NFA。<br>
首先，我们要把正则表达式转换为方便记录输入、运算的方式。</li>
</ul>
<h2 id="正则表达式-后缀表达式">🏈正则表达式 → 后缀表达式</h2>
<p>后缀表达式是一种方便记录输入、运算的表达式，本身已包含了运算符的优先级，也称为<strong>逆波兰表示法</strong>（Reverse Polish Notation，简写为 RPN）。<br>
为方便记录运算，我们为正则表达式中的组合运算也创建一个运算符“<code>.</code>”（本文只涉及最简单的正则表达式形式，这里的“<code>.</code>”不是用于匹配任意字符的特殊符号）。<br>
正则表达式 <code>ab|c</code>对应的后缀表达式为 <code>ab.c|</code>。<br>
这样，通过逐个扫描后缀表达式，并识别其中的运算符来执行，就可以对后缀表达式进行求解。对于正则表达式来说，则是在将其变为后缀表达式后，通过“求值”的过程来进一步构建并得到最终的 NFA。<br>
用于创建后缀表达式的是<strong>调度场算法</strong>。<br>
对于这里的正则表达式处理的场景，算法的大致描述如下：</p>
<ul>
<li>创建输出队列 output 和运算符栈 ops；</li>
<li>依次读取输入字符串中每一个字符 ch；
<ul>
<li>如果 ch 是普通字符，追加到 output；</li>
<li>如果 ch 是运算符，只要 ops 栈顶的运算符优先级不低于 ch，依次出栈并追加到 output，最后将 ch 入栈 ops；</li>
<li>如果 ch 是“(”，入栈 ops；</li>
<li>如果 ch 是“)”，只要 ops 栈顶不是“(”，依次出栈并追加到 output；</li>
</ul>
</li>
<li>将 ops 中运算符依次出栈追加到 output；</li>
<li>返回 output。</li>
</ul>
<p>具体处理过程中，由于原始正则表达式中并没有组合运算符，所以需要自行判断合理的插入位置。<br>
运算符优先级如下（由高到低）：</p>
<ol>
<li><code>* ? +</code></li>
<li><code>.</code></li>
<li><code>|</code></li>
<li><code>(</code></li>
</ol>
<h2 id="后缀表达式-nfa">🏈后缀表达式 → NFA</h2>
<p>基于后缀表达式创建 NFA，是一个由简单的 NFA 进行不断组合得到复杂 NFA 的过程。<br>
用于表示状态 State 的数据结构为：</p>
<pre><code class="language-javascript">// State
{
	id: String,
	type: String, // 'n' - normal, 'e' - epsilon, 'end'
	symbol: String, // 普通状态对应的输入字符
	out: State, // 允许的下一个状态
	out1: State // 允许的下一个状态
}
</code></pre>
<p>每个状态可以对应最多两个 out 状态，像 <code>a|b|c</code> 的表达式，会被分解为 <code>(a|b)|c</code>，每次运算符“<code>|</code>”都只处理两个（子）表达式。<br>
在构造最终 NFA 过程中，每次会创建 NFA 的片段 Fragment：</p>
<pre><code class="language-javascript">// Fragment
{
    start: State,
    out: State
}
</code></pre>
<p>不管 NFA 片段内部是怎样复杂，它都只有一个入口（开始状态），一个出口（最终状态）。<br>
处理的过程大致为：</p>
<ul>
<li>创建用于记录 NFA 片段的栈 stack；</li>
<li>依次读取输入的后缀表达式的每个字符 ch；
<ul>
<li>如果 ch 是运算符，从 stack 出栈所需数目的 NFA 片段，构建新的 NFA 片段后入栈 stack；</li>
<li>如果 ch 是普通字符，创建新的状态，并构建只包含此状态的 NFA 片段入栈 stack；</li>
</ul>
</li>
<li>返回 stack 栈顶的 NFA 片段，即最终结果。</li>
</ul>
<p>以对组合运算的处理为例：</p>
<pre><code class="language-javascript">const e2 = stack.pop();
const e1 = stack.pop();
e1.out.out = e2.start;
stack.push(new Fragment(e1.start, e2.out));
</code></pre>
<p>从 stack 出栈两个 NFA 片段，然后将其首尾相连后构建新的 NFA 片段再入栈。</p>
<h1 id="nfa-的执行">NFA 的执行</h1>
<p>NFA 的执行过程就是用当前状态来比对字符串的当前字符，如果匹配就继续比对下一个状态和下一个字符，否则匹配失败。<br>
不过由于 NFA 的不确定性，所以可能会同时有多个匹配的状态。</p>
<h1 id="总结">总结</h1>
<p>综上，正则表达式的执行，可以通过构建等价的 NFA，然后执行 NFA 来匹配输入的字符串。真实的 JavaScript 中的正则表达式拥有更多的特性，其正则表达式引擎也更加复杂。</p>
<h1 id="简单正则表达式引擎的实现">简单正则表达式引擎的实现</h1>
<blockquote>
<p><a href="https://www.jianshu.com/p/879bb15b1198">简单的正则表达式引擎实现</a></p>
</blockquote>
<h2 id="基本的数据结构定义">🏈基本的数据结构定义</h2>
<p>核心思路是读取正则表达式以后生成对应的NFA，NFA中有边和状态两个结构。边的结构记录了它的起点和终点，同时通过枚举类型记录匹配的其他需求。</p>
<pre><code class="language-cpp">//用于处理‘^’字符
enum { NEXCLUDED = false, EXCLUDED = true }; 
//用于处理预处理类型，0-128以内ASCII字符直接匹配
enum { LCASES=256, UCASES=257, NUM=258, EPSILON=259, ANY=260, WS=261 };
class Edge
{
public:
    State *start;
    State *end;
    int type;
    int exclude;
    Edge(State *s, State *e, int t, bool ex = NEXCLUDED) :start(s), end(e), type(t), exclude(ex) {};
}
</code></pre>
<p>状态有预备，成功和失败三种，同时每个状态维护两个向量，向量存储了出边和入边的指针。</p>
<pre><code class="language-cpp">enum { READY = -1, SUCCESS = 1, FAIL = 0};
class State
{
public:
    int status;
    std::list&lt;Edge *&gt; InEdges;
    std::list&lt;Edge *&gt; OutEdges;
}
</code></pre>
<p>NFA 类会存储一个正则表达式，同时存储 NFA 的起点和终点，并使用了两个链表来维护 NFA 的边和状态，同时用一个链表来存储匹配成功的字符串。两个静态的字符串指针用于记录文件和正则表达式字符串的读取状态，静态常量，使得最终函数只会对文件内容和正则表达式扫描一次，避免在匹配成功的字符串中再匹配子串。</p>
<pre><code class="language-cpp">char *regex;
    State *Start;
    State *End;
    std::list&lt;Edge *&gt; edgeList;
    std::list&lt;State *&gt; stateList;
    std::list&lt;char&gt; matchedChar;
    static char *regRead;
    static char *fileRead;
}
</code></pre>
<p>生成NFA的过程中，通过 currentEnd 和 currentStart 两个指针分别指向当前字符读取完成后生成的最后一个状态和当前字符读取之前的开始状态，维护这两个指针的目的是为了记录 NFA 的生成过程，在处理‘<code>*</code>’、‘<code>+</code>’、‘<code>？</code>’等字符的时候起到了重要的作用。同时我们利用list内置的迭代器对链表进行遍历，这个方式在匹配过程中也用到了。</p>
<pre><code class="language-cpp">State *currentEnd, *currentStart;
State *alternate;
list&lt;Edge *&gt;::iterator itor;
</code></pre>
<h2 id="nfa的生成">🏈NFA的生成</h2>
<p>关键的部分在于匹配字符串时采取的思路，尤其是特殊字符的生成 NFA 的方式，这个不同于课本上最开始的 NFA 生成算法，而是基于读取字符串的过程，同时避免了字符串的回退等，读取一个字符就生成一个对应的边并压入链表中，对‘<code>*</code>’、‘<code>+</code>’，‘<code>？</code>’和特殊符号也是如此，使得处理更加简单的同时避免生成过于冗余的状态，兼顾了时间和空间效率。以下举例说明。</p>
<h2 id="边和状态的生成">🏈边和状态的生成</h2>
<p>边的生成使用 newEdge 函数,需要记录起点和终点，以及类型，同时在生成边以后要用重载的两个 patch函数将状态和边完全连接起来。</p>
<pre><code class="language-cpp">void Nfa::newEdge(State * start, State * end, int type, int exclude = NEXCLUDED)
{
    Edge *out = new Edge(start, end, type, exclude);
    end-&gt;patch(out, end);
    start-&gt;patch(start, out);
    edgeList.push_back(out);
}
</code></pre>
<p>以普通字符的生成和‘<code>.</code>’字符的产生方式为例，他们都是生成一条边和一个新的状态。</p>
<pre><code class="language-cpp">case '.':   /* any */
    currentStart = currentEnd;
    currentEnd = new State();
    newEdge(currentStart, currentEnd, ANY, NEXCLUDED);      
    stateList.push_back(currentEnd);
default:
    currentStart = currentEnd;
    currentEnd = new State();
    newEdge(currentStart, currentEnd, *regRead, NEXCLUDED);
    stateList.push_back(currentEnd);
    break;
</code></pre>
<p>如下图所示：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586155514824.png" alt="create new edge" loading="lazy"><br>
接下来的符号处理都假定初始状态如下图所示：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586155565253.png" alt="current stage" loading="lazy"></p>
<h2 id="的处理">🏈'|'的处理</h2>
<p>以 currentStart 指向的状态作为子 NFA 的起点，同时将子 NFA 的终点状态和原 NFA 的终点进行合并。</p>
<pre><code class="language-cpp">case '|':   // alternate 
    regRead++;
    currentStart = start;
    alternate= regex2nfa(regRead, start);
    currentEnd-&gt;merge(alternate);
    stateList.remove(alternate);
    regRead--;
</code></pre>
<p>如下图所示：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586155719185.png" alt="spilt the edges" loading="lazy"></p>
<h2 id="的处理-2">🏈'?' &amp; '*' &amp; '+'的处理</h2>
<p>读取到‘<code>?</code>’只需要在上一条边的基础上继续连接原有的边即可：</p>
<pre><code class="language-cpp">case '?':   // zero or one 
    newEdge(currentStart, currentEnd, EPSILON, NEXCLUDED);
    break;
</code></pre>
<p>读取到‘<code>\*</code>’后，直接将 currentStart 和 currentEnd 进行合并成环：</p>
<pre><code class="language-cpp">case '*':   // zero or more 
    alternate = currentEnd;
    currentStart-&gt;merge(alternate);
    stateList.remove(alternate);
    currentEnd = currentStart;
    break;
</code></pre>
<p>读取到‘<code>+</code>’后，只需添加若干条边从 currentEnd 状态指向 currentStart 状态的下一个状态即可：</p>
<pre><code class="language-cpp">case '+':   /* one or more */
    itor = currentStart-&gt;OutEdges.begin();
    for (;itor != currentStart-&gt;OutEdges.end();itor++)
        newEdge(currentEnd, (*itor)-&gt;end, (*itor)-&gt;type, (*itor)-&gt;exclude);
    break;
</code></pre>
<p>如下图所示：<br>
<img src="https://tdmaker.github.io/faded//post-images/1586156107334.png" alt="special characters" loading="lazy"></p>
<h2 id="简单的分组支持">🏈简单的分组支持</h2>
<p>对于中括号和括号进行了一定的支持，括号直接递归调用 NFA 的生成函数，中括号和预定义字符都有其对应的函数进行支持。</p>
<h2 id="nfa匹配">🏈NFA匹配</h2>
<p>匹配过程采用了递归的方式，step函数调用match函数匹配边和文件字符，匹配成功后即递归调用进入下一个状态。</p>
<pre><code class="language-cpp">if (End-&gt;status == SUCCESS) 
        return SUCCESS;

for(;itor != current-&gt;OutEdges.end();itor++)
{   
    if ((*itor)-&gt;match(fileRead))
    {
        (*itor)-&gt;end-&gt;status = SUCCESS;
        matchedChar.push_back(*fileRead);
        ++fileRead;
        if (step((*itor)-&gt;end))
            return SUCCESS;
            --fileRead;
        matchedChar.pop_back();
    }
    if ((*itor)-&gt;type == EPSILON &amp;&amp; step((*itor)-&gt;end))
        return SUCCESS;
}
return FAIL;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式——断言]]></title>
        <id>https://tdmaker.github.io/faded/post/regular-expression-assert/</id>
        <link href="https://tdmaker.github.io/faded/post/regular-expression-assert/">
        </link>
        <updated>2020-04-06T01:54:20.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><a href="https://www.jianshu.com/p/08c2fa742c1b">正则表达式断言</a></p>
</blockquote>
<p>正则表达式大多数结构匹配的文本会出现在最终的匹配结果中，但也有些结构并不真正匹配文本，而只是负责判断某个位置左/右侧是否符合要求，这种结构被称为断言（assertion）。常见的断言有三类： 单词边界、行起始/结束位置、环视。本文主要简单阐述对三类断言的理解。</p>
<h1 id="单词边界">单词边界</h1>
<p>单词边界顾名思义，是指单词字符 <code>(\w)</code> 能匹配的字符串的左右位置。在 JavaScript、php、Python 2、Ruby 中，单词字符 <code>(\w)</code> 等同于 <code>[0-9a-zA-Z]</code>，所以在这些语言中，给定一段文本可以用 <code>\b\w+\b</code> 把所有单词提取出来。<br>
例如：</p>
<pre><code class="language-javascript">('Love is composed of a single soul inhabiting two bodies.').match(/\b\w+\b/g)

return [&quot;Love&quot;, &quot;is&quot;, &quot;composed&quot;, &quot;of&quot;, &quot;a&quot;, &quot;single&quot;, &quot;soul&quot;, &quot;inhabiting&quot;, &quot;two&quot;, &quot;bodies&quot;]
</code></pre>
<p>这里值得注意的是，有些单词例如 E-mail 和组合词 I'm 这样的，<code>\b\w+\b</code> 是无法匹配的。如要匹配，可根据需求修改为 <code>\b['-\w]\b</code>。</p>
<ul>
<li><strong>单词边界</strong>记为 <code>\b</code>，它能匹配的位置：一边是单词字符 <code>\w</code>，一边是非单词字符 <code>\W</code>。</li>
<li>与单词边界对应的是<strong>非单词边界</strong> <code>\B</code>，两者关系类似 <code>\w</code> 与 <code>\W</code>、<code>\d</code> 与 <code>\D</code>。</li>
</ul>
<p>这里注意，<strong>非单词边界</strong>（<code>\B</code>）和<strong>单词字符</strong>（<code>\w</code>）是不一样的，因为前者是<strong>断言</strong>，而后者是<strong>普通匹配</strong>。<br>
例如：</p>
<pre><code class="language-javascript">// 式一
String(1234567890).replace(/(?=(\B)(\d{3})+$)/g, ',')
=&gt; 1,234,567,890
// 式二
String(1234567890).replace(/(?=(\w)(\d{3})+$)/g, ',')
=&gt; ,123,456,7890
// 附加常用例子，20180911格式化为2018-09-11
'20180911'.replace(/(?=\B(\d{2})+$)/g, '-').replace(/-/, '')
=&gt;2018-09-11
</code></pre>
<p>造成差异的原因就是:<br>
式一中的 <code>\B</code> 匹配边界（是断言）。第一次匹配时，在 1234567890 中数字 1 的前方时，会环视后方进行肯定断言<code>(?=)</code>：后方必须是满足两个 pattern 才通过。第一个 pattern <code>(\B)</code>在数字 1 的前方匹配成功；故继续在此位置匹配第二个 pattern <code>(\d{3})+$</code>，发现 123456789 之后并不是结束符（结束符和开始符也是断言，下文讲述），故匹配失败。开始第二次匹配，从数字 1 和数字 2 的中间开始...最后会匹配成功三个位置：1 和 2 之间、4 和 5 之间、7 和 8 之间，再被,替换，故得到结果。</p>
<p>同理，式二在第一次匹配时，在数字 1 的前方环视后方进行肯定断言：后方必须是满足两个 pattern 才通过。第一个 pattern <code>(\w)</code> 在数字 1 的前方匹配成功，并将匹配位置移动到 1 和 2 之间；然后继续匹配第二个pattern <code>(\d{3})+$</code>...第一次匹配成功，故数字 1 前方的断言是成功的，标记该位置...最后得到三个位置：1 前方、3 和 4 之间、6 和 7 之间，再被,替换，故得到结果。</p>
<p>所以 <code>\B</code> 只是去判断该位置左右是否只有一边有单词字符，另一边不是单词字符，且在匹配成功时，不会导致匹配位置发生改变。说起来算是一种判断吧~</p>
<p>这种只是匹配某个位置而不是文本的元字符，在正则中也被称为<strong>锚点</strong>。下文继续介绍常见锚点之二：行起始/结束位置。</p>
<h1 id="行起始结束位置">行起始/结束位置</h1>
<p><code>^</code> 与 <code>$</code> 分别表示（行）起始位置和（行）结束位置，比如正则表达式 <code>/^lu.*r$/</code> 只能匹配的 lu 开始并以 r 结束的字符串，例如：luwuer、lu fd --r，不能匹配 nb luwuer、lu fd --rb等。</p>
<p>其实行起始/结束位置断言，常用在正则表达式开启<strong>多行模式</strong>（Multiline Mode）的情况下。<br>
例如：</p>
<pre><code class="language-javascript">('first line\nsecond line\nlast line').match(/^\w+/gm)
return [&quot;first&quot;, &quot;second&quot;, &quot;last&quot;]
</code></pre>
<p>既然是多行匹配，这里说说如何划分<strong>行</strong>。</p>
<p>在编辑文本时，敲回车键就向文本输入了<strong>行终止符</strong>（line terminal），表示结束当前行。这里只需注意，敲入回车时向文本中输入的行终止符在主流平台上是有差别的：</p>
<ul>
<li>Windows 的行终止符是 <code>\r\n</code>。</li>
<li>UNIX/Linux/Mac OS 的行终止符是 <code>\n</code>。</li>
</ul>
<p>不过正则的行起始/结束位置断言都是可以识别的哈~</p>
<h1 id="环视">环视</h1>
<p>环视是指在某个位置向左/向右看，保证其左/右位置必须出现某类字符（包括单词字符 <code>\w</code> 和非单词字符<code>\W</code>），且环视也同上两个断言，只是做一个判断（匹配一个位置，本身不匹配任何字符，但又比上两个断言灵活）。也有人称环视为<strong>零宽断言</strong>。</p>
<p>环视分为四种：</p>
<ul>
<li><strong>肯定顺序</strong>环视（正向肯定断言）positive-lookahead: <code>?=pattern</code>；</li>
<li><strong>否定顺序</strong>环视（正向否定断言）negative-lookahead: <code>?!pattern</code>；</li>
<li><strong>肯定逆序</strong>环视（反向肯定断言）positive-lookahead: <code>?&lt;=pattern</code>，js不支持；</li>
<li><strong>否定逆序</strong>环视（反向否定断言）negative-lookahead: <code>?&lt;=pattern</code>，js不支持。</li>
</ul>
<p>比如我们要匹配一串文字中包含在书名号《》中的书名，如不考虑环视可能需要如下实现：</p>
<pre><code class="language-javascript">('三体是刘慈欣创作的系列长篇科幻小说，由《三体》、《三体Ⅱ·黑暗森林》、《三体Ⅲ·死神永生》组成。').match(/《.*?》/g).join(',').replace(/[《》]/g, '').split(',')
return [&quot;三体&quot;, &quot;三体Ⅱ·黑暗森林&quot;, &quot;三体Ⅲ·死神永生&quot;]
</code></pre>
<p><em>正则默认是贪婪模式（在整个表达式匹配成功的前提下，尽可能多的匹配），开启非贪婪模式（在整个表达式匹配成功的前提下，尽可能少的匹配）的方法：在贪婪量词 <code>{m,n}</code>、<code>{m,}</code>、<code>?</code>、<code>*</code>、<code>+</code> 后加上一个 <code>?</code> 号，例如 <code>+?</code>。</em><br>
而在使用环视时会更简单：</p>
<pre><code class="language-javascript">('三体是刘慈欣创作的系列长篇科幻小说，由《三体》、《三体Ⅱ·黑暗森林》、《三体Ⅲ·死神永生》组成。').replace(/《/g,'\n').match(/^.*?(?=》)/gm)
return [&quot;三体&quot;, &quot;三体Ⅱ·黑暗森林&quot;, &quot;三体Ⅲ·死神永生&quot;]
</code></pre>
<p>似乎也没简单多少...当然最主要的原因是js不支持逆序环视啦啦啦</p>
<p>再举例，匹配6位数字构成的字符串：</p>
<pre><code class="language-javascript">// 无环视
'http://luwuer.com/629212/1234567890'.match(/[^\d]\d{6}[^\d]/g).join('').match(/\d{6}/g)
return [&quot;629212&quot;]
// 环视
'http://luwuer.com/629212/1234567890'.match(/(?!\d).\d{6}(?!\d)/g).join('').match(/\d{6}/g)
return [&quot;629212&quot;]
</code></pre>
<p>其实环视在js中更多的是与replace函数组合，就像在单词边界一节中最后的例子。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery——拓展]]></title>
        <id>https://tdmaker.github.io/faded/post/jquery-extension/</id>
        <link href="https://tdmaker.github.io/faded/post/jquery-extension/">
        </link>
        <updated>2020-04-05T10:01:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="extend函数">😲 extend函数</h1>
<p><code>$.extend(target,[object1],[onjectN])</code><br>
<code>$.extend([deep],target,object1,[objectN])</code></p>
<pre><code class="language-javascript">var obj1 = {
	height: 100,
	width: 100,
	length: 100,
	div: {
		x: 100,
		y: 100
	}
};
var obj2 = {
	height: 200,
	width: 200,
	div: {
		x: 200
	}
};
$.extend(obj1, obj2);
console.log(obj1.height);
console.log(obj1.div.y);
//result:200,undefined
</code></pre>
<p>当使用true参数时，</p>
<pre><code class="language-javascript">var obj1 = {
	height: 100,
	width: 100,
	length: 100,
	div: {
		x: 100,
		y: 100
	}
};
var obj2 = {
	height: 200,
	width: 200,
	div: {
		x: 200
	}
};
$.extend(true, obj1, obj2);
console.log(obj1.height);
console.log(obj1.div.y);
//result:200,100
</code></pre>
<p>拓展jQuery的公共函数</p>
<pre><code class="language-javascript">$.extend({
	minValue: function(a, b) {
		return a &gt; b ? a: b
	}
});
var a = prompt(&quot;input a&quot;);
var b = prompt(&quot;input b&quot;);
console.log($.minValue(a, b));
</code></pre>
<p><code>$.fn.extend()</code> 方法可以创建 jQuery 对象方法</p>
<pre><code class="language-javascript">$.fn.extend({
	test: function() {
		alert(&quot;click &quot; + $(this).html() + &quot; this is test function&quot;);
	}
});
$(&quot;#fnExtend&quot;).click(function() {
	$(this).test();
});
</code></pre>
<h1 id="自定义jquery函数">😲 自定义jQuery函数</h1>
<h2 id="添加新的全局函数">🤗 添加新的全局函数</h2>
<pre><code class="language-javascript">$.clickDiv = function(node) {
	console.log(node.text() + &quot; click&quot;);
};
$(&quot;div&quot;).click(function() {
	$.clickDiv($(this));
});
</code></pre>
<h2 id="通过-extend-函数添加全局函数">🤗 通过 <code>extend</code> 函数添加全局函数</h2>
<pre><code class="language-javascript">$.extend({
	foo: function() {
		alert(&quot;this is a new function 'foo()'&quot;);
	}
});
$.foo();
</code></pre>
<h2 id="使用命名空间">🤗 使用命名空间</h2>
<pre><code class="language-javascript">$.myPluin = {
	ale: function() {
		alert(&quot;function from myPluin&quot;);
	}
};
$.nextPluin = {
	ale: function() {
		alert(&quot;function from nextPluin&quot;);
	}
}
$.myPluin.ale();
$.nextPluin.ale();
</code></pre>
<h1 id="自定义选择器">😲 自定义选择器</h1>
<pre><code class="language-javascript">$.myPluin = {
	ale: function() {
		alert(&quot;function from myPluin&quot;);
	}
};
$.nextPluin = {
	ale: function() {
		alert(&quot;function from nextPluin&quot;);
	}
};
index = -1; //定义全局变量 index
jQuery.expr[&quot;:&quot;].le = function(elem, i, match) {
	// return i&gt;match[3]-0||i==match[3]
	console.log(index);
    index++;
	return index &gt; match[3] - 0; // 返回索引大于 3 的元素
};
$(&quot;p:le(2)&quot;).css(&quot;color&quot;, &quot;red&quot;);
// 返回元素索引值大于等于 2 的元素
$.myPluin.ale();
$.nextPluin.ale();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery——选择器]]></title>
        <id>https://tdmaker.github.io/faded/post/jquery-selectors/</id>
        <link href="https://tdmaker.github.io/faded/post/jquery-selectors/">
        </link>
        <updated>2020-04-05T08:48:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="基本选择器">基本选择器</h1>
<h2 id="id-选择器">🎼 ID 选择器：</h2>
<pre><code class="language-javascript">// 选中 id 为 myDiv 的元素，速度最快
$(&quot;#myDiv&quot;)
</code></pre>
<h2 id="类选择器">🎼 类选择器：</h2>
<pre><code class="language-javascript">// 选中 class 属性为 red 的所有元素
$(&quot;.red&quot;)
</code></pre>
<h2 id="元素选择器">🎼 元素选择器：</h2>
<pre><code class="language-javascript">// 选中所有 div 元素
$(&quot;div&quot;)
</code></pre>
<h2 id="通配符选择器">🎼 通配符选择器：</h2>
<pre><code class="language-javascript">// 选中所有元素
$(&quot;*&quot;)
</code></pre>
<h2 id="复合选择器">🎼 复合选择器：</h2>
<pre><code class="language-javascript">// 选中所有 span 元素和所有 id 为 myDiv 的元素
$(&quot;span,#myDiv&quot;)
</code></pre>
<h1 id="层次选择器">层次选择器</h1>
<h2 id="选择器1-选择器2">🎼 选择器1 选择器2：</h2>
<pre><code class="language-javascript">// 选中 body 内的所有 div 元素
$(&quot;body div&quot;)
</code></pre>
<h2 id="选择器1-选择器2-2">🎼 选择器1 &gt; 选择器2：</h2>
<pre><code class="language-javascript">// 选中 body 内的所有直接 div 元素，不查找间接元素
$(&quot;body &gt; div&quot;)
</code></pre>
<h2 id="选择器1-选择器2-3">🎼 选择器1 + 选择器2：</h2>
<pre><code class="language-javascript">// 选中 body 内的所有 div 元素
$(&quot;body div&quot;)
</code></pre>
<h2 id="选择器1-~-选择器2">🎼 选择器1 ~ 选择器2：</h2>
<pre><code class="language-javascript">// 选中 body 内的所有 div 元素
$(&quot;body div&quot;)
</code></pre>
<h1 id="基本过滤选择器">基本过滤选择器</h1>
<h2 id="第一个元素选择器">🎼 第一个元素选择器</h2>
<pre><code class="language-javascript">// 选中第一个 div 元素
$(&quot;div:first&quot;)
</code></pre>
<h2 id="最后一个元素选择器">🎼 最后一个元素选择器</h2>
<pre><code class="language-javascript">// 选中最后一个 div 元素
$(&quot;div:last&quot;)
</code></pre>
<h2 id="排除选择器">🎼 排除选择器</h2>
<pre><code class="language-javascript">// 选中 class 不为 red 的所有 div 元素
$(&quot;div:not(.red)&quot;)
</code></pre>
<h2 id="偶数选择器">🎼 偶数选择器</h2>
<pre><code class="language-javascript">// 选中索引值为偶数的 div 元素
$(&quot;div:even&quot;)
</code></pre>
<h2 id="奇数选择器">🎼 奇数选择器</h2>
<pre><code class="language-javascript">// 选中索引值为奇数的 div 元素
$(&quot;div:odd&quot;)
</code></pre>
<h2 id="索引值选择器">🎼 索引值选择器</h2>
<pre><code class="language-javascript">// 选中索引值为 2 的 div 元素
$(&quot;div:eq(2)&quot;)
// 选中索引值大于 2 的 div 元素
$(&quot;div:gt(2)&quot;)
// 选中索引值小于2的 div 元素
$(&quot;div:lt(2)&quot;)
</code></pre>
<h1 id="内容过滤选择器">内容过滤选择器</h1>
<pre><code class="language-javascript">// 选中所有包含文本 ok 的 div 元素
$(&quot;div:contains(ok)&quot;)
// 选中所有为空的 div 元素
$(&quot;div:empty&quot;)
// 选中所有包含 class 为 red 的 div 元素
$(&quot;div:has(.red)&quot;)
// 选中所有不为空的 div 元素
$(&quot;div:parent&quot;)
</code></pre>
<h1 id="可见性过滤选择器">可见性过滤选择器</h1>
<pre><code class="language-javascript">// 选中所有不可见的 div 元素
$(&quot;div:hidden&quot;)
// 选中所有可见的 div 元素
$(&quot;div:visible&quot;)
</code></pre>
<h1 id="属性过滤选择器">属性过滤选择器</h1>
<pre><code class="language-javascript">// 选中所有包含属性 title 的 div 元素
$(&quot;div[title]&quot;)
// 选中所有属性 title 等于 ok 的 div 元素
$(&quot;div[title=ok]&quot;)
// 选中所有属性 title 不等于 ok 的 div 元素
$(&quot;div[title!=ok]&quot;)
// 选中所有属性 title 值以 ok 开头的 div 元素
$(&quot;div[title^=ok]&quot;)
// 选中所有属性 title 值含有 ok 的 div 元素
$(&quot;div[title*=ok]&quot;)
// 选中所有包含属性 id，并且属性 title 值以 ok 开头的 div 元素
$(&quot;div[id][title^=ok]&quot;)
</code></pre>
<h1 id="子元素过滤选择器">子元素过滤选择器</h1>
<pre><code class="language-javascript">// 选中所有是第二个子结点的 div 元素
$(&quot;div:nth-child(2)&quot;)
// 选中所有是第一个子结点的 div 元素
$(&quot;div:first-child&quot;)
// 选中所有是最后一个子结点的 div 元素
$(&quot;div:last-child&quot;)
// 选中所有是唯一子结点的 div 元素
$(&quot;div:only-child&quot;)
</code></pre>
<h1 id="表单属性过滤选择器">表单属性过滤选择器</h1>
<pre><code class="language-javascript">// 选中表单内可用 input
$(&quot;#form1 input:enabled&quot;)
// 选中表单内不可用 input
$(&quot;#form1 input:disabled&quot;)
// 选中表单内所有选中的元素
$(&quot;#form1 input:checked&quot;)
// 选中下拉列表中选中的元素
$(&quot;select &gt; option:selected&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式——匹配]]></title>
        <id>https://tdmaker.github.io/faded/post/regular-expression-pattern-matching/</id>
        <link href="https://tdmaker.github.io/faded/post/regular-expression-pattern-matching/">
        </link>
        <updated>2020-04-05T07:38:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="pattern">💊(?:pattern)</h1>
<p>非获取匹配，匹配 pattern 但不获取匹配结果，不进行存储供以后使用。这在使用或字符“<code>(|)</code>”来组合一个模式的各个部分是很有用。例如“<code>industr(?:y|ies)</code>”就是一个比“<code>industry|industries</code>”更简略的表达式。</p>
<h1 id="pattern-2">💊 (?=pattern)</h1>
<p>非获取匹配，正向肯定预查，在任何匹配 pattern 的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“<code>Windows(?=95|98|NT|2000)</code>”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p>
<h1 id="pattern-3">💊 (?!pattern)</h1>
<p>非获取匹配，正向否定预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“<code>Windows(?!95|98|NT|2000)</code>”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。</p>
<h1 id="pattern-4">💊 (?&lt;=pattern)</h1>
<p>非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“<code>(?&lt;=95|98|NT|2000)Windows</code>”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</p>
<h1 id="pattern-5">💊 (?&lt;!pattern)</h1>
<p>非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“<code>(?&lt;!95|98|NT|2000)Windows</code>”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题</p>
]]></content>
    </entry>
</feed>